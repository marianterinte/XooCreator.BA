name: Deploy XooCreator.BA to Azure Web App

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  DOTNET_VERSION: '8.0.x'
  WORKING_DIRECTORY: 'XooCreatorBA/XooCreator.BA'
  PUBLISH_DIR: './publish'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore
        run: dotnet restore XooCreator.BA.csproj
        working-directory: ${{ env.WORKING_DIRECTORY }}

      - name: Build
        run: dotnet build XooCreator.BA.csproj --configuration Release --no-restore
        working-directory: ${{ env.WORKING_DIRECTORY }}

      - name: Publish
        run: dotnet publish XooCreator.BA.csproj --configuration Release --no-build --output ${{ env.PUBLISH_DIR }}
        working-directory: ${{ env.WORKING_DIRECTORY }}
      
      - name: Verify Stories folder in publish output
        run: |
          echo "Checking if Stories folder exists in publish output..."
          ls -la ${{ env.WORKING_DIRECTORY }}/${{ env.PUBLISH_DIR }}/Data/SeedData/
          if [ -d "${{ env.WORKING_DIRECTORY }}/${{ env.PUBLISH_DIR }}/Data/SeedData/Stories" ]; then
            echo "✓ Stories folder found in publish output"
            ls -la ${{ env.WORKING_DIRECTORY }}/${{ env.PUBLISH_DIR }}/Data/SeedData/Stories/
          else
            echo "⚠️ Stories folder not found in publish output"
          fi

      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Set Azure App Settings (DATABASE_URL, ASPNETCORE_ENVIRONMENT)
        run: |
          # Method 1: Try with resource group secret if available
          if [ -n "${{ secrets.AZURE_RESOURCE_GROUP }}" ]; then
            echo "Using provided resource group: ${{ secrets.AZURE_RESOURCE_GROUP }}"
            az webapp config appsettings set \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --name ${{ secrets.AZURE_WEBAPP_NAME }} \
              --settings \
                ASPNETCORE_ENVIRONMENT=Production \
              DOTNET_ENVIRONMENT=Production \
                DATABASE_URL="${{ secrets.SUPABASE_DB_URL }}"
          else
            # Method 2: Auto-discover resource group
            echo "Auto-discovering resource group..."
            RG=$(az webapp show --name ${{ secrets.AZURE_WEBAPP_NAME }} --query resourceGroup -o tsv)
            echo "Found resource group: $RG"
            az webapp config appsettings set \
              --resource-group "$RG" \
              --name ${{ secrets.AZURE_WEBAPP_NAME }} \
              --settings \
                ASPNETCORE_ENVIRONMENT=Production \
              DOTNET_ENVIRONMENT=Production \
                DATABASE_URL="${{ secrets.SUPABASE_DB_URL }}"
          fi

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
          package: ${{ env.WORKING_DIRECTORY }}/${{ env.PUBLISH_DIR }}

      # Pas de debug (poți șterge după ce verifici)
      - name: Debug Azure account
        run: az account show
