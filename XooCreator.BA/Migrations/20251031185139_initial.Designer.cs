// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using XooCreator.BA.Data;

#nullable disable

namespace XooCreator.BA.Migrations
{
    [DbContext(typeof(XooDbContext))]
    [Migration("20251031185139_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("XooCreator.BA.Data.AlchimaliaUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Auth0Id")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("HasVisitedImaginationLaboratory")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Picture")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Auth0Id")
                        .IsUnique();

                    b.ToTable("AlchimaliaUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Auth0Id = "test-user-sub",
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 758, DateTimeKind.Utc).AddTicks(6720),
                            Email = "test@example.com",
                            HasVisitedImaginationLaboratory = false,
                            LastLoginAt = new DateTime(2025, 10, 31, 18, 51, 38, 758, DateTimeKind.Utc).AddTicks(6720),
                            Name = "Test User",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 758, DateTimeKind.Utc).AddTicks(6721)
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Auth0Id = "marian-test-sub",
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 758, DateTimeKind.Utc).AddTicks(6725),
                            Email = "marian@example.com",
                            HasVisitedImaginationLaboratory = false,
                            LastLoginAt = new DateTime(2025, 10, 31, 18, 51, 38, 758, DateTimeKind.Utc).AddTicks(6726),
                            Name = "Marian",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 758, DateTimeKind.Utc).AddTicks(6726)
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Auth0Id = "alchimalia-admin-sub",
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 758, DateTimeKind.Utc).AddTicks(6729),
                            Email = "alchimalia@admin.com",
                            HasVisitedImaginationLaboratory = false,
                            LastLoginAt = new DateTime(2025, 10, 31, 18, 51, 38, 758, DateTimeKind.Utc).AddTicks(6730),
                            Name = "Marian Teacher",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 758, DateTimeKind.Utc).AddTicks(6731)
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.Animal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsHybrid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Src")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Animals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            IsHybrid = false,
                            Label = "Bunny",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000003"),
                            Src = "images/animals/base/bunny.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            IsHybrid = false,
                            Label = "Hippo",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000006"),
                            Src = "images/animals/base/hippo.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            IsHybrid = false,
                            Label = "Giraffe",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000004"),
                            Src = "images/animals/base/giraffe.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            IsHybrid = false,
                            Label = "Dog",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000003"),
                            Src = "images/animals/base/dog.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            IsHybrid = false,
                            Label = "Fox",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000005"),
                            Src = "images/animals/base/fox.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            IsHybrid = false,
                            Label = "Cat",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000003"),
                            Src = "images/animals/base/cat.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            IsHybrid = false,
                            Label = "Monkey",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000002"),
                            Src = "images/animals/base/monkey.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            IsHybrid = false,
                            Label = "Camel",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000001"),
                            Src = "images/animals/base/camel.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            IsHybrid = false,
                            Label = "Deer",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000005"),
                            Src = "images/animals/base/deer.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000a"),
                            IsHybrid = false,
                            Label = "Duck",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000006"),
                            Src = "images/animals/base/duck.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000b"),
                            IsHybrid = false,
                            Label = "Eagle",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000007"),
                            Src = "images/animals/base/eagle.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000c"),
                            IsHybrid = false,
                            Label = "Elephant",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000004"),
                            Src = "images/animals/base/elephant.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000d"),
                            IsHybrid = false,
                            Label = "Ostrich",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000004"),
                            Src = "images/animals/base/ostrich.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000e"),
                            IsHybrid = false,
                            Label = "Parrot",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000002"),
                            Src = "images/animals/base/parrot.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000f"),
                            IsHybrid = false,
                            Label = "Jaguar",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000002"),
                            Src = "images/animals/base/jaguar.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            IsHybrid = false,
                            Label = "Toucan",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000002"),
                            Src = "images/animals/base/toucan.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            IsHybrid = false,
                            Label = "Anaconda",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000002"),
                            Src = "images/animals/base/anaconda.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            IsHybrid = false,
                            Label = "Capuchin Monkey",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000002"),
                            Src = "images/animals/base/capuchin_monkey.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            IsHybrid = false,
                            Label = "Poison Dart Frog",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000002"),
                            Src = "images/animals/base/poison_dart_frog.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000014"),
                            IsHybrid = false,
                            Label = "Lion",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000004"),
                            Src = "images/animals/base/lion.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000015"),
                            IsHybrid = false,
                            Label = "African Elephant",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000004"),
                            Src = "images/animals/base/african_elephant.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000016"),
                            IsHybrid = false,
                            Label = "Giraffe",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000004"),
                            Src = "images/animals/base/giraffe.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000017"),
                            IsHybrid = false,
                            Label = "Zebra",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000004"),
                            Src = "images/animals/base/zebra.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000018"),
                            IsHybrid = false,
                            Label = "Rhinoceros",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000004"),
                            Src = "images/animals/base/rhinoceros.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000019"),
                            IsHybrid = false,
                            Label = "Bison",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000007"),
                            Src = "images/animals/base/bison.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000001a"),
                            IsHybrid = false,
                            Label = "Saiga Antelope",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000004"),
                            Src = "images/animals/base/saiga_antelope.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000001b"),
                            IsHybrid = false,
                            Label = "Gray Wolf",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000005"),
                            Src = "images/animals/base/gray_wolf.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000001c"),
                            IsHybrid = false,
                            Label = "Przewalski's Horse",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000007"),
                            Src = "images/animals/base/przewalski_horse.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000001d"),
                            IsHybrid = false,
                            Label = "Steppe Eagle",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000007"),
                            Src = "images/animals/base/steppe_eagle.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000001e"),
                            IsHybrid = false,
                            Label = "Cow",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000003"),
                            Src = "images/animals/base/cow.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000001f"),
                            IsHybrid = false,
                            Label = "Sheep",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000003"),
                            Src = "images/animals/base/sheep.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000020"),
                            IsHybrid = false,
                            Label = "Horse",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000003"),
                            Src = "images/animals/base/horse.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000021"),
                            IsHybrid = false,
                            Label = "Chicken",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000003"),
                            Src = "images/animals/base/chicken.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000022"),
                            IsHybrid = false,
                            Label = "Pig",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000003"),
                            Src = "images/animals/base/pig.jpg"
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.AnimalPartSupport", b =>
                {
                    b.Property<Guid>("AnimalId")
                        .HasColumnType("uuid");

                    b.Property<string>("PartKey")
                        .HasColumnType("character varying(32)");

                    b.HasKey("AnimalId", "PartKey");

                    b.HasIndex("PartKey");

                    b.ToTable("AnimalPartSupports");

                    b.HasData(
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000001"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000001"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000001"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000002"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000002"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000002"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000003"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000003"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000003"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000003"),
                            PartKey = "legs"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000003"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000003"),
                            PartKey = "horn"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000003"),
                            PartKey = "horns"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000004"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000004"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000004"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000005"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000005"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000005"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000006"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000006"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000006"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000007"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000007"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000007"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000008"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000008"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000008"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000009"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000009"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000009"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000009"),
                            PartKey = "legs"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000009"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000009"),
                            PartKey = "horn"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000009"),
                            PartKey = "horns"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000a"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000a"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000a"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000a"),
                            PartKey = "legs"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000a"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000a"),
                            PartKey = "wings"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000b"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000b"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000b"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000b"),
                            PartKey = "legs"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000b"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000b"),
                            PartKey = "wings"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000c"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000c"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000c"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000d"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000d"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000d"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000d"),
                            PartKey = "legs"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000d"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000d"),
                            PartKey = "wings"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000e"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000e"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000e"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000e"),
                            PartKey = "legs"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000e"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000e"),
                            PartKey = "wings"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000f"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000f"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000f"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000010"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000010"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000010"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000010"),
                            PartKey = "legs"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000010"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000010"),
                            PartKey = "wings"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000011"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000011"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000011"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000012"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000012"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000012"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000013"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000013"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000013"),
                            PartKey = "legs"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000013"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000014"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000014"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000014"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000015"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000015"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000015"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000016"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000016"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000016"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000016"),
                            PartKey = "legs"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000016"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000017"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000017"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000017"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000017"),
                            PartKey = "legs"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000017"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000018"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000018"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000018"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000018"),
                            PartKey = "legs"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000018"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000018"),
                            PartKey = "horn"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000019"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000019"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000019"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001a"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001a"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001a"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001a"),
                            PartKey = "legs"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001a"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001a"),
                            PartKey = "horns"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001b"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001b"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001b"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001c"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001c"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001c"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001c"),
                            PartKey = "legs"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001c"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001d"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001d"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001d"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001d"),
                            PartKey = "legs"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001d"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001d"),
                            PartKey = "wings"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001e"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001e"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001e"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001f"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001f"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001f"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000020"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000020"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000020"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000020"),
                            PartKey = "legs"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000020"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000021"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000021"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000021"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000021"),
                            PartKey = "legs"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000021"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000021"),
                            PartKey = "wings"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000022"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000022"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000022"),
                            PartKey = "arms"
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.AnimalTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AnimalId")
                        .HasColumnType("uuid");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId", "LanguageCode")
                        .IsUnique();

                    b.ToTable("AnimalTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bcb31f68-c184-420d-a417-170bc7c99b0a"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Label = "Bunny",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("060d8adf-1efd-4f8f-bb28-a54f846088ec"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Label = "Hippo",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("1aa00b94-a96c-4850-8c68-754af3449185"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000003"),
                            Label = "Giraffe",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("11e97253-6d10-42dd-8673-6a61624c23f5"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000004"),
                            Label = "Dog",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("f98b218c-210a-4a59-b476-0573da489714"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000005"),
                            Label = "Fox",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("072a10a6-87d5-490a-970e-2d1a299c5d94"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000006"),
                            Label = "Cat",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("090b79c3-3f05-4a58-90cf-a434b0c2161c"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000007"),
                            Label = "Monkey",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("22fc8c4c-2682-49fa-9375-cbc9e5833a15"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000008"),
                            Label = "Camel",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("2247fcfe-67f9-4058-a9b5-72b42ff63631"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000009"),
                            Label = "Deer",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("41527f46-89c2-4dbd-b797-d842d2106a0a"),
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000a"),
                            Label = "Duck",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("bf058994-3d00-4c16-8143-084a36eb3c6a"),
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000b"),
                            Label = "Eagle",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("654e0aa2-fd85-4d38-b6d6-8ee9a1ce42ae"),
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000c"),
                            Label = "Elephant",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("952f58d9-6c8c-440d-9951-8d94342a105d"),
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000d"),
                            Label = "Ostrich",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("f28891c5-3b19-4a0c-9a59-207f37d3eea3"),
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000e"),
                            Label = "Parrot",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("819536ed-280f-4134-a3e7-40bac436424b"),
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000f"),
                            Label = "Jaguar",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("2180a7f2-da4d-420e-ae14-c0c50190243a"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000010"),
                            Label = "Toucan",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("eca8543d-70c0-4099-bde6-522d2f9bf208"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000011"),
                            Label = "Anaconda",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("0bed9781-7345-4b85-9427-6b9227a9babf"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000012"),
                            Label = "Capuchin Monkey",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("903b34d7-bccc-424d-a1be-0349050dab8d"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000013"),
                            Label = "Poison Dart Frog",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("7c15098e-8f4f-4d14-b570-bb3f209825cd"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000014"),
                            Label = "Lion",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("90c8f8bf-e2d3-4aa9-9733-e7e007d6ad83"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000015"),
                            Label = "African Elephant",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("bf3e25b8-5282-40e2-80d8-4b44231e547e"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000016"),
                            Label = "Giraffe",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("3561101d-c18a-4306-b9d8-0c46d28ca500"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000017"),
                            Label = "Zebra",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("e3e3a4c3-4247-42d3-9482-1ef2837f9cb5"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000018"),
                            Label = "Rhinoceros",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("64159a53-bd62-40c8-b44b-7956fd4b6ad0"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000019"),
                            Label = "Bison",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("d4784854-773a-4174-8ae1-70705f9ed7a4"),
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001a"),
                            Label = "Saiga Antelope",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("63bff1df-fbda-4417-a61b-95ddf2de4d74"),
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001b"),
                            Label = "Gray Wolf",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("69cfc946-6ae3-4d1e-9ec3-c66426bfe39a"),
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001c"),
                            Label = "Przewalski's Horse",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("e2a5526b-b97c-4aef-994b-4f76c64fb247"),
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001d"),
                            Label = "Steppe Eagle",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("6e5af2a6-e7f6-408a-851c-281cf76b6f01"),
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001e"),
                            Label = "Cow",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("e6849fac-cc5f-4090-8e46-853da445179d"),
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001f"),
                            Label = "Sheep",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("0074584f-29f6-4be8-98a2-33cd7d623915"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000020"),
                            Label = "Horse",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("cc86e4e9-17be-4165-b268-3662e8aa0c98"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000021"),
                            Label = "Chicken",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("d5f8fc18-68c7-40e3-8202-06c7190e1fa9"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000022"),
                            Label = "Pig",
                            LanguageCode = "en-us"
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.BestiaryItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ArmsKey")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("BodyKey")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HeadKey")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Story")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.HasKey("Id");

                    b.ToTable("BestiaryItems");
                });

            modelBuilder.Entity("XooCreator.BA.Data.BodyPart", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("IsBaseLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Key");

                    b.ToTable("BodyParts");

                    b.HasData(
                        new
                        {
                            Key = "head",
                            Image = "images/bodyparts/face.webp",
                            IsBaseLocked = false,
                            Name = "Head"
                        },
                        new
                        {
                            Key = "body",
                            Image = "images/bodyparts/body.webp",
                            IsBaseLocked = false,
                            Name = "Body"
                        },
                        new
                        {
                            Key = "arms",
                            Image = "images/bodyparts/hands.webp",
                            IsBaseLocked = false,
                            Name = "Arms"
                        },
                        new
                        {
                            Key = "legs",
                            Image = "images/bodyparts/legs.webp",
                            IsBaseLocked = true,
                            Name = "Legs"
                        },
                        new
                        {
                            Key = "tail",
                            Image = "images/bodyparts/tail.webp",
                            IsBaseLocked = true,
                            Name = "Tail"
                        },
                        new
                        {
                            Key = "wings",
                            Image = "images/bodyparts/wings.webp",
                            IsBaseLocked = true,
                            Name = "Wings"
                        },
                        new
                        {
                            Key = "horn",
                            Image = "images/bodyparts/horn.webp",
                            IsBaseLocked = true,
                            Name = "Horn"
                        },
                        new
                        {
                            Key = "horns",
                            Image = "images/bodyparts/horns.webp",
                            IsBaseLocked = true,
                            Name = "Horns"
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.BodyPartTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BodyPartKey")
                        .IsRequired()
                        .HasColumnType("character varying(32)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BodyPartKey", "LanguageCode")
                        .IsUnique();

                    b.ToTable("BodyPartTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("af1526ec-a547-4f7f-bfb3-88801374dcd5"),
                            BodyPartKey = "head",
                            LanguageCode = "en-us",
                            Name = "Head"
                        },
                        new
                        {
                            Id = new Guid("24fe1037-dc54-4a34-946a-45cf4d42d3d8"),
                            BodyPartKey = "body",
                            LanguageCode = "en-us",
                            Name = "Body"
                        },
                        new
                        {
                            Id = new Guid("7dae6f59-4867-4ac0-8e07-e8c9fc8d7c75"),
                            BodyPartKey = "arms",
                            LanguageCode = "en-us",
                            Name = "Arms"
                        },
                        new
                        {
                            Id = new Guid("486c58cf-5a52-4d42-8825-fe78b61f5cb6"),
                            BodyPartKey = "legs",
                            LanguageCode = "en-us",
                            Name = "Legs"
                        },
                        new
                        {
                            Id = new Guid("8fb28922-5431-4f2c-9590-71a06d200cde"),
                            BodyPartKey = "tail",
                            LanguageCode = "en-us",
                            Name = "Tail"
                        },
                        new
                        {
                            Id = new Guid("c68ac9ff-c510-4a75-ad52-1f90ea47d19b"),
                            BodyPartKey = "wings",
                            LanguageCode = "en-us",
                            Name = "Wings"
                        },
                        new
                        {
                            Id = new Guid("47fb666e-b5c7-4011-96b4-f092abcf9ae4"),
                            BodyPartKey = "horn",
                            LanguageCode = "en-us",
                            Name = "Horn"
                        },
                        new
                        {
                            Id = new Guid("9a855722-7e5c-4c8b-b9ef-46cade394ab1"),
                            BodyPartKey = "horns",
                            LanguageCode = "en-us",
                            Name = "Horns"
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.BuilderConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BaseUnlockedAnimalIds")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BaseUnlockedBodyPartKeys")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BuilderConfigs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BaseUnlockedAnimalIds = "[\"00000000-0000-0000-0000-000000000001\",\"00000000-0000-0000-0000-000000000002\",\"00000000-0000-0000-0000-000000000003\"]",
                            BaseUnlockedBodyPartKeys = "[\"head\",\"body\",\"arms\"]"
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.Creature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Archetype")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PromptUsedJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Rarity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Story")
                        .HasColumnType("text");

                    b.Property<string>("ThumbUrl")
                        .HasColumnType("text");

                    b.Property<string>("TraitsJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TreeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TreeId");

                    b.HasIndex("UserId");

                    b.ToTable("Creatures");
                });

            modelBuilder.Entity("XooCreator.BA.Data.CreditTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Reference")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CreditTransactions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Amount = 15,
                            CreatedAt = new DateTime(2025, 10, 30, 18, 51, 38, 758, DateTimeKind.Utc).AddTicks(6940),
                            Reference = "test-purchase-marian",
                            Type = 0,
                            UserId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            Amount = -5,
                            CreatedAt = new DateTime(2025, 10, 31, 16, 51, 38, 758, DateTimeKind.Utc).AddTicks(6953),
                            Reference = "test-generation",
                            Type = 1,
                            UserId = new Guid("22222222-2222-2222-2222-222222222222")
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.CreditWallet", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Balance")
                        .HasColumnType("integer");

                    b.Property<int>("DiscoveryBalance")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId");

                    b.ToTable("CreditWallets");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Balance = 5,
                            DiscoveryBalance = 0,
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 758, DateTimeKind.Utc).AddTicks(6864)
                        },
                        new
                        {
                            UserId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Balance = 5,
                            DiscoveryBalance = 0,
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 758, DateTimeKind.Utc).AddTicks(6866)
                        },
                        new
                        {
                            UserId = new Guid("33333333-3333-3333-3333-333333333333"),
                            Balance = 1000,
                            DiscoveryBalance = 0,
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 758, DateTimeKind.Utc).AddTicks(6868)
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.HeroClickMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AudioUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HeroId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("MessageKey")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("HeroId")
                        .IsUnique();

                    b.ToTable("HeroClickMessages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f47fa6db-5e1c-44f9-8ab3-d297e68a6e05"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/puf-puf/hero_puf-puf_click_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 748, DateTimeKind.Utc).AddTicks(2185),
                            HeroId = "puf-puf",
                            IsActive = true,
                            MessageKey = "hero_puf-puf_click_message",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 748, DateTimeKind.Utc).AddTicks(2186)
                        },
                        new
                        {
                            Id = new Guid("ee7a198e-8f23-46aa-ab95-9d16728f4a3c"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/linkaro/hero_linkaro_click_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 748, DateTimeKind.Utc).AddTicks(2227),
                            HeroId = "linkaro",
                            IsActive = true,
                            MessageKey = "hero_linkaro_click_message",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 748, DateTimeKind.Utc).AddTicks(2227)
                        },
                        new
                        {
                            Id = new Guid("b20586da-db31-476a-a7f0-951c61396029"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/grubot/hero_grubot_click_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 748, DateTimeKind.Utc).AddTicks(2252),
                            HeroId = "grubot",
                            IsActive = true,
                            MessageKey = "hero_grubot_click_message",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 748, DateTimeKind.Utc).AddTicks(2252)
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.HeroDefinition", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("CourageCost")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreativityCost")
                        .HasColumnType("integer");

                    b.Property<int>("CuriosityCost")
                        .HasColumnType("integer");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsUnlocked")
                        .HasColumnType("boolean");

                    b.Property<double>("PositionX")
                        .HasColumnType("decimal(10,6)");

                    b.Property<double>("PositionY")
                        .HasColumnType("decimal(10,6)");

                    b.Property<string>("PrerequisitesJson")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("RewardsJson")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("SafetyCost")
                        .HasColumnType("integer");

                    b.Property<int>("ThinkingCost")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("HeroDefinitions");

                    b.HasData(
                        new
                        {
                            Id = "puf-puf",
                            CourageCost = 0,
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 748, DateTimeKind.Utc).AddTicks(3359),
                            CreativityCost = 0,
                            CuriosityCost = 0,
                            Image = "images/heroes/pufpufblink.gif",
                            IsUnlocked = false,
                            PositionX = 0.0,
                            PositionY = 0.0,
                            PrerequisitesJson = "[]",
                            RewardsJson = "[]",
                            SafetyCost = 0,
                            ThinkingCost = 0,
                            Type = "STORY_HERO",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 748, DateTimeKind.Utc).AddTicks(3361)
                        },
                        new
                        {
                            Id = "linkaro",
                            CourageCost = 0,
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 748, DateTimeKind.Utc).AddTicks(3375),
                            CreativityCost = 0,
                            CuriosityCost = 0,
                            Image = "images/heroes/linkaro.png",
                            IsUnlocked = false,
                            PositionX = 0.0,
                            PositionY = 0.0,
                            PrerequisitesJson = "[]",
                            RewardsJson = "[]",
                            SafetyCost = 0,
                            ThinkingCost = 0,
                            Type = "STORY_HERO",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 748, DateTimeKind.Utc).AddTicks(3375)
                        },
                        new
                        {
                            Id = "grubot",
                            CourageCost = 0,
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 748, DateTimeKind.Utc).AddTicks(3379),
                            CreativityCost = 0,
                            CuriosityCost = 0,
                            Image = "images/heroes/grubot.png",
                            IsUnlocked = false,
                            PositionX = 0.0,
                            PositionY = 0.0,
                            PrerequisitesJson = "[]",
                            RewardsJson = "[]",
                            SafetyCost = 0,
                            ThinkingCost = 0,
                            Type = "STORY_HERO",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 748, DateTimeKind.Utc).AddTicks(3380)
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.HeroDefinitionTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HeroDefinitionId")
                        .IsRequired()
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Story")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("HeroDefinitionId", "LanguageCode")
                        .IsUnique();

                    b.ToTable("HeroDefinitionTranslations");
                });

            modelBuilder.Entity("XooCreator.BA.Data.HeroMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AudioUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HeroId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("MessageKey")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("RegionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("HeroId", "RegionId")
                        .IsUnique();

                    b.ToTable("HeroMessages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a9cd4ae6-eb66-4876-9504-cc8c87858bc9"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/puf-puf/hero_puf-puf_region_gateway_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9741),
                            HeroId = "puf-puf",
                            IsActive = true,
                            MessageKey = "hero_puf-puf_region_gateway_message",
                            RegionId = "gateway",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9741)
                        },
                        new
                        {
                            Id = new Guid("7508121c-ee9e-4ad1-bd8f-0ad963ff75b8"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/puf-puf/hero_puf-puf_region_terra_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9760),
                            HeroId = "puf-puf",
                            IsActive = true,
                            MessageKey = "hero_puf-puf_region_terra_message",
                            RegionId = "terra",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9760)
                        },
                        new
                        {
                            Id = new Guid("f6245c19-43f8-4ccd-8214-0a3a0bf94e3e"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/puf-puf/hero_puf-puf_region_lunaria_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9764),
                            HeroId = "puf-puf",
                            IsActive = true,
                            MessageKey = "hero_puf-puf_region_lunaria_message",
                            RegionId = "lunaria",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9765)
                        },
                        new
                        {
                            Id = new Guid("3fa0f8b2-78ef-43db-b4c2-98f4b35312c2"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/puf-puf/hero_puf-puf_region_oceanica_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9781),
                            HeroId = "puf-puf",
                            IsActive = true,
                            MessageKey = "hero_puf-puf_region_oceanica_message",
                            RegionId = "oceanica",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9781)
                        },
                        new
                        {
                            Id = new Guid("af049981-6ed2-4307-847e-750b11b164e6"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/puf-puf/hero_puf-puf_region_sylvaria_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9784),
                            HeroId = "puf-puf",
                            IsActive = true,
                            MessageKey = "hero_puf-puf_region_sylvaria_message",
                            RegionId = "sylvaria",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9785)
                        },
                        new
                        {
                            Id = new Guid("25c04900-8eef-41a8-b50d-42c61c45aba3"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/puf-puf/hero_puf-puf_region_crystalia_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9863),
                            HeroId = "puf-puf",
                            IsActive = true,
                            MessageKey = "hero_puf-puf_region_crystalia_message",
                            RegionId = "crystalia",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9863)
                        },
                        new
                        {
                            Id = new Guid("fc147df8-7743-4b36-bb1f-ce57fe24e0f9"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/puf-puf/hero_puf-puf_region_zephyra_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9867),
                            HeroId = "puf-puf",
                            IsActive = true,
                            MessageKey = "hero_puf-puf_region_zephyra_message",
                            RegionId = "zephyra",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9868)
                        },
                        new
                        {
                            Id = new Guid("2e3d4e6f-f442-4b23-ada7-717e34a42c02"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/puf-puf/hero_puf-puf_region_pyron_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9871),
                            HeroId = "puf-puf",
                            IsActive = true,
                            MessageKey = "hero_puf-puf_region_pyron_message",
                            RegionId = "pyron",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9871)
                        },
                        new
                        {
                            Id = new Guid("05fa9614-a0c4-4192-8130-d1be436243a0"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/puf-puf/hero_puf-puf_region_neptunia_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9874),
                            HeroId = "puf-puf",
                            IsActive = true,
                            MessageKey = "hero_puf-puf_region_neptunia_message",
                            RegionId = "neptunia",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9875)
                        },
                        new
                        {
                            Id = new Guid("8dfbb391-097a-40bc-b937-57c5ca0d61ee"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/puf-puf/hero_puf-puf_region_aetherion_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9879),
                            HeroId = "puf-puf",
                            IsActive = true,
                            MessageKey = "hero_puf-puf_region_aetherion_message",
                            RegionId = "aetherion",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9879)
                        },
                        new
                        {
                            Id = new Guid("f207bf7a-f9e7-4725-9a7e-fa015375ca42"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/puf-puf/hero_puf-puf_region_kelo_ketis_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9882),
                            HeroId = "puf-puf",
                            IsActive = true,
                            MessageKey = "hero_puf-puf_region_kelo_ketis_message",
                            RegionId = "kelo-ketis",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9883)
                        },
                        new
                        {
                            Id = new Guid("89850ed2-1ff8-4e83-bbca-c7e0b5f8cd2d"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/linkaro/hero_linkaro_region_gateway_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9892),
                            HeroId = "linkaro",
                            IsActive = true,
                            MessageKey = "hero_linkaro_region_gateway_message",
                            RegionId = "gateway",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9893)
                        },
                        new
                        {
                            Id = new Guid("f678e9ca-6bbe-472f-ad6b-75ff62a2913e"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/linkaro/hero_linkaro_region_terra_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9895),
                            HeroId = "linkaro",
                            IsActive = true,
                            MessageKey = "hero_linkaro_region_terra_message",
                            RegionId = "terra",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9896)
                        },
                        new
                        {
                            Id = new Guid("2cec14a5-18f9-445e-a437-be00d855f4cf"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/linkaro/hero_linkaro_region_lunaria_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9899),
                            HeroId = "linkaro",
                            IsActive = true,
                            MessageKey = "hero_linkaro_region_lunaria_message",
                            RegionId = "lunaria",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9899)
                        },
                        new
                        {
                            Id = new Guid("36d92b8e-a0ff-4630-b59c-4b199e11427c"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/linkaro/hero_linkaro_region_mechanika_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9902),
                            HeroId = "linkaro",
                            IsActive = true,
                            MessageKey = "hero_linkaro_region_mechanika_message",
                            RegionId = "mechanika",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9903)
                        },
                        new
                        {
                            Id = new Guid("ad6a6a57-8be5-4f65-a7e5-41ba15e032ab"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/linkaro/hero_linkaro_region_oceanica_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9906),
                            HeroId = "linkaro",
                            IsActive = true,
                            MessageKey = "hero_linkaro_region_oceanica_message",
                            RegionId = "oceanica",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9906)
                        },
                        new
                        {
                            Id = new Guid("51eacf75-2a99-425c-9cb0-1fd9e99ad79b"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/linkaro/hero_linkaro_region_sylvaria_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9909),
                            HeroId = "linkaro",
                            IsActive = true,
                            MessageKey = "hero_linkaro_region_sylvaria_message",
                            RegionId = "sylvaria",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9909)
                        },
                        new
                        {
                            Id = new Guid("bb08f26f-c0e4-4b13-8e33-dd9cbbf17b96"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/linkaro/hero_linkaro_region_crystalia_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9913),
                            HeroId = "linkaro",
                            IsActive = true,
                            MessageKey = "hero_linkaro_region_crystalia_message",
                            RegionId = "crystalia",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9914)
                        },
                        new
                        {
                            Id = new Guid("63316874-cb91-4d05-83f3-a69860827fe9"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/linkaro/hero_linkaro_region_zephyra_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9917),
                            HeroId = "linkaro",
                            IsActive = true,
                            MessageKey = "hero_linkaro_region_zephyra_message",
                            RegionId = "zephyra",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9917)
                        },
                        new
                        {
                            Id = new Guid("3495c1f7-67c8-4fd2-baa5-73cb93804520"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/linkaro/hero_linkaro_region_pyron_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9923),
                            HeroId = "linkaro",
                            IsActive = true,
                            MessageKey = "hero_linkaro_region_pyron_message",
                            RegionId = "pyron",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9923)
                        },
                        new
                        {
                            Id = new Guid("4296bbfb-3fba-4e42-ba42-abbae5ca4fe8"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/linkaro/hero_linkaro_region_neptunia_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9926),
                            HeroId = "linkaro",
                            IsActive = true,
                            MessageKey = "hero_linkaro_region_neptunia_message",
                            RegionId = "neptunia",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9927)
                        },
                        new
                        {
                            Id = new Guid("4e2f97e1-09f3-4458-a562-e75827115144"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/linkaro/hero_linkaro_region_aetherion_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9930),
                            HeroId = "linkaro",
                            IsActive = true,
                            MessageKey = "hero_linkaro_region_aetherion_message",
                            RegionId = "aetherion",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9930)
                        },
                        new
                        {
                            Id = new Guid("d555c0a8-9f0c-484b-a6fe-d153a56be65a"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/linkaro/hero_linkaro_region_kelo_ketis_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9933),
                            HeroId = "linkaro",
                            IsActive = true,
                            MessageKey = "hero_linkaro_region_kelo_ketis_message",
                            RegionId = "kelo-ketis",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9933)
                        },
                        new
                        {
                            Id = new Guid("8f573300-6dd4-4f93-857e-84468b49be25"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/grubot/hero_grubot_region_gateway_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9937),
                            HeroId = "grubot",
                            IsActive = true,
                            MessageKey = "hero_grubot_region_gateway_message",
                            RegionId = "gateway",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9938)
                        },
                        new
                        {
                            Id = new Guid("b665aaff-a518-490b-be9a-5ce021d7338e"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/grubot/hero_grubot_region_terra_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9941),
                            HeroId = "grubot",
                            IsActive = true,
                            MessageKey = "hero_grubot_region_terra_message",
                            RegionId = "terra",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9941)
                        },
                        new
                        {
                            Id = new Guid("baa07960-844f-4c55-ae5c-a96ee6f0e5e1"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/grubot/hero_grubot_region_lunaria_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9944),
                            HeroId = "grubot",
                            IsActive = true,
                            MessageKey = "hero_grubot_region_lunaria_message",
                            RegionId = "lunaria",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9945)
                        },
                        new
                        {
                            Id = new Guid("8f717c31-03fb-4527-a263-4f351ef8930b"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/grubot/hero_grubot_region_mechanika_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9947),
                            HeroId = "grubot",
                            IsActive = true,
                            MessageKey = "hero_grubot_region_mechanika_message",
                            RegionId = "mechanika",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9948)
                        },
                        new
                        {
                            Id = new Guid("143b3d78-eab3-44e3-941f-be8217bb6e66"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/grubot/hero_grubot_region_oceanica_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9955),
                            HeroId = "grubot",
                            IsActive = true,
                            MessageKey = "hero_grubot_region_oceanica_message",
                            RegionId = "oceanica",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9955)
                        },
                        new
                        {
                            Id = new Guid("05f2df49-d1d2-4023-b874-392b66073081"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/grubot/hero_grubot_region_sylvaria_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9958),
                            HeroId = "grubot",
                            IsActive = true,
                            MessageKey = "hero_grubot_region_sylvaria_message",
                            RegionId = "sylvaria",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9958)
                        },
                        new
                        {
                            Id = new Guid("5778a9d3-0b8f-404b-a14f-77ff868e0bed"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/grubot/hero_grubot_region_crystalia_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9961),
                            HeroId = "grubot",
                            IsActive = true,
                            MessageKey = "hero_grubot_region_crystalia_message",
                            RegionId = "crystalia",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9962)
                        },
                        new
                        {
                            Id = new Guid("8f93012c-9658-4682-b2d4-747d5f4a3138"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/grubot/hero_grubot_region_zephyra_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9965),
                            HeroId = "grubot",
                            IsActive = true,
                            MessageKey = "hero_grubot_region_zephyra_message",
                            RegionId = "zephyra",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9965)
                        },
                        new
                        {
                            Id = new Guid("2068a6a7-b1d4-4a31-afdf-aecdd30efc92"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/grubot/hero_grubot_region_pyron_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9968),
                            HeroId = "grubot",
                            IsActive = true,
                            MessageKey = "hero_grubot_region_pyron_message",
                            RegionId = "pyron",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9969)
                        },
                        new
                        {
                            Id = new Guid("c7965147-0381-4aa8-8860-1b8e32ea9bd8"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/grubot/hero_grubot_region_neptunia_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9971),
                            HeroId = "grubot",
                            IsActive = true,
                            MessageKey = "hero_grubot_region_neptunia_message",
                            RegionId = "neptunia",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9972)
                        },
                        new
                        {
                            Id = new Guid("bb0559e1-7f33-42cc-9c31-7f7deaf595bf"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/grubot/hero_grubot_region_aetherion_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9976),
                            HeroId = "grubot",
                            IsActive = true,
                            MessageKey = "hero_grubot_region_aetherion_message",
                            RegionId = "aetherion",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9977)
                        },
                        new
                        {
                            Id = new Guid("b3995179-6f45-4a41-b295-0f861e778297"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/grubot/hero_grubot_region_kelo_ketis_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9979),
                            HeroId = "grubot",
                            IsActive = true,
                            MessageKey = "hero_grubot_region_kelo_ketis_message",
                            RegionId = "kelo-ketis",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(9980)
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.HeroProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("HeroId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HeroType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceStoryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UnlockedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "HeroId", "HeroType")
                        .IsUnique();

                    b.ToTable("HeroProgress");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            HeroId = "seed",
                            HeroType = "HERO_TREE_TRANSFORMATION",
                            SourceStoryId = "",
                            UnlockedAt = new DateTime(2025, 10, 31, 18, 51, 38, 758, DateTimeKind.Utc).AddTicks(6903),
                            UserId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            HeroId = "seed",
                            HeroType = "HERO_TREE_TRANSFORMATION",
                            SourceStoryId = "",
                            UnlockedAt = new DateTime(2025, 10, 31, 18, 51, 38, 758, DateTimeKind.Utc).AddTicks(6907),
                            UserId = new Guid("22222222-2222-2222-2222-222222222222")
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.HeroTreeProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("NodeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TokensCostCourage")
                        .HasColumnType("integer");

                    b.Property<int>("TokensCostCreativity")
                        .HasColumnType("integer");

                    b.Property<int>("TokensCostCuriosity")
                        .HasColumnType("integer");

                    b.Property<int>("TokensCostSafety")
                        .HasColumnType("integer");

                    b.Property<int>("TokensCostThinking")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UnlockedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "NodeId")
                        .IsUnique();

                    b.ToTable("HeroTreeProgress");
                });

            modelBuilder.Entity("XooCreator.BA.Data.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<string>("PayloadJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ResultUrl")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasMaxLength(24)
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasMaxLength(24)
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("XooCreator.BA.Data.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000001"),
                            Name = "Sahara"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000002"),
                            Name = "Jungle"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000003"),
                            Name = "Farm"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000004"),
                            Name = "Savanna"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000005"),
                            Name = "Forest"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000006"),
                            Name = "Wetlands"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000007"),
                            Name = "Mountains"
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AnswerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Guid>("StoryTileId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TokensJson")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StoryTileId", "AnswerId")
                        .IsUnique();

                    b.ToTable("StoryAnswers");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryAnswerToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("StoryAnswerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("StoryAnswerId");

                    b.ToTable("StoryAnswerTokens");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryAnswerTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<Guid>("StoryAnswerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StoryAnswerId", "LanguageCode")
                        .IsUnique();

                    b.ToTable("StoryAnswerTranslations");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryDefinition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CoverImageUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("StoryCategory")
                        .HasColumnType("integer");

                    b.Property<string>("StoryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Summary")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StoryId")
                        .IsUnique();

                    b.ToTable("StoryDefinitions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            Category = "terra",
                            CoverImageUrl = "images/tol/stories/pp-prietenul-pierdut/0.cover.png",
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 749, DateTimeKind.Utc).AddTicks(5674),
                            CreatedBy = new Guid("33333333-3333-3333-3333-333333333333"),
                            IsActive = true,
                            SortOrder = 1,
                            Status = 1,
                            StoryCategory = 1,
                            StoryId = "learn-to-read-s1",
                            Title = "Puf-Puf și prietenul pierdut",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 749, DateTimeKind.Utc).AddTicks(5675),
                            UpdatedBy = new Guid("33333333-3333-3333-3333-333333333333")
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryDefinitionTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<Guid>("StoryDefinitionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StoryDefinitionId", "LanguageCode")
                        .IsUnique();

                    b.ToTable("StoryDefinitionTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3d13ba12-6085-4b94-9d03-cdbcf52c6006"),
                            LanguageCode = "ro-ro",
                            StoryDefinitionId = new Guid("44444444-4444-4444-4444-444444444444"),
                            Title = "Puf-Puf și prietenul pierdut"
                        },
                        new
                        {
                            Id = new Guid("a8a7e22b-cbc7-44dd-811a-0d3fe800937c"),
                            LanguageCode = "en-us",
                            StoryDefinitionId = new Guid("44444444-4444-4444-4444-444444444444"),
                            Title = "Puf-Puf and the Lost Friend"
                        },
                        new
                        {
                            Id = new Guid("ed45169b-5889-4e83-909c-85930d9481ee"),
                            LanguageCode = "hu-hu",
                            StoryDefinitionId = new Guid("44444444-4444-4444-4444-444444444444"),
                            Title = "Puf-Puf és az elveszett barát"
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryHero", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HeroId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("UnlockConditionJson")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("HeroId")
                        .IsUnique();

                    b.ToTable("StoryHeroes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000100"),
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 745, DateTimeKind.Utc).AddTicks(1844),
                            HeroId = "puf-puf",
                            ImageUrl = "images/tol/stories/intro-pufpuf/heroes/pufpufblink.gif",
                            IsActive = true,
                            UnlockConditionJson = "{\"Type\":\"story_completion\",\"RequiredStories\":[\"intro-pufpuf\"],\"MinProgress\":100}",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 745, DateTimeKind.Utc).AddTicks(1845)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111100"),
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 745, DateTimeKind.Utc).AddTicks(1965),
                            HeroId = "linkaro",
                            ImageUrl = "images/tol/stories/lunaria-s1/heroes/linkaro.png",
                            IsActive = true,
                            UnlockConditionJson = "{\"Type\":\"story_completion\",\"RequiredStories\":[\"lunaria-s1\"],\"MinProgress\":100}",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 745, DateTimeKind.Utc).AddTicks(1966)
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222200"),
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 745, DateTimeKind.Utc).AddTicks(2059),
                            HeroId = "grubot",
                            ImageUrl = "images/tol/stories/mechanika-s1/heroes/grubot.png",
                            IsActive = true,
                            UnlockConditionJson = "{\"Type\":\"story_completion\",\"RequiredStories\":[\"mechanika-s1\"],\"MinProgress\":100}",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 745, DateTimeKind.Utc).AddTicks(2060)
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryHeroUnlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("StoryHeroId")
                        .HasColumnType("uuid");

                    b.Property<string>("StoryId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("UnlockOrder")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StoryHeroId", "StoryId")
                        .IsUnique();

                    b.ToTable("StoryHeroUnlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f799a6be-cfd0-47af-aca7-bf6bc964bc9c"),
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(505),
                            StoryHeroId = new Guid("00000000-0000-0000-0000-000000000100"),
                            StoryId = "intro-pufpuf",
                            UnlockOrder = 1
                        },
                        new
                        {
                            Id = new Guid("f4bf5349-a025-488e-8cf0-9578ecd1293f"),
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(808),
                            StoryHeroId = new Guid("11111111-1111-1111-1111-111111111100"),
                            StoryId = "lunaria-s1",
                            UnlockOrder = 1
                        },
                        new
                        {
                            Id = new Guid("302bd076-f5cb-463d-bf8f-17555840a343"),
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 746, DateTimeKind.Utc).AddTicks(928),
                            StoryHeroId = new Guid("22222222-2222-2222-2222-222222222200"),
                            StoryId = "mechanika-s1",
                            UnlockOrder = 1
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryMarketplaceInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AgeRating")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Characters")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("EstimatedReadingTime")
                        .HasColumnType("integer");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNew")
                        .HasColumnType("boolean");

                    b.Property<int>("PriceInCredits")
                        .HasColumnType("integer");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("StoryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("StoryId")
                        .IsUnique();

                    b.ToTable("StoryMarketplaceInfos");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SelectedAnswer")
                        .HasColumnType("text");

                    b.Property<string>("StoryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TokensJson")
                        .HasColumnType("text");

                    b.Property<string>("TreeConfigurationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TreeConfigurationId");

                    b.HasIndex("UserId", "StoryId", "TreeConfigurationId")
                        .IsUnique();

                    b.ToTable("StoryProgress");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryPurchase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CreditsSpent")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PurchasedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("StoryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StoryId");

                    b.HasIndex("UserId", "StoryId")
                        .IsUnique();

                    b.ToTable("StoryPurchases");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryTile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AudioUrl")
                        .HasColumnType("text");

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Question")
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Guid>("StoryDefinitionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<string>("TileId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("StoryDefinitionId", "TileId")
                        .IsUnique();

                    b.ToTable("StoryTiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a6d6c13f-173c-43b1-ab62-25e28af3b0b6"),
                            Caption = "Puf-Puf pleacă",
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 749, DateTimeKind.Utc).AddTicks(6098),
                            ImageUrl = "images/tol/stories/pp-prietenul-pierdut/1.pleaca.png",
                            SortOrder = 1,
                            StoryDefinitionId = new Guid("44444444-4444-4444-4444-444444444444"),
                            Text = "Puf-Puf e un pisoi mic și pufos. Plouă peste pădure. Poartă o pelerină portocalie. „Ce plăcut e parfumul ploii!”, spune Puf-Puf.",
                            TileId = "1",
                            Type = "page",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 749, DateTimeKind.Utc).AddTicks(6098)
                        },
                        new
                        {
                            Id = new Guid("82a3609f-4ec4-4175-8463-0a48c416a487"),
                            Caption = "Un plânset mic",
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 749, DateTimeKind.Utc).AddTicks(6305),
                            ImageUrl = "images/tol/stories/pp-prietenul-pierdut/2.planset.png",
                            SortOrder = 2,
                            StoryDefinitionId = new Guid("44444444-4444-4444-4444-444444444444"),
                            Text = "Se aude: „Pfff… pfff…”. Puf-Puf se oprește. „Cine plânge?” Din tufiș apare un iepuraș mic.",
                            TileId = "2",
                            Type = "page",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 749, DateTimeKind.Utc).AddTicks(6306)
                        },
                        new
                        {
                            Id = new Guid("474eb590-7a34-4ea8-89c5-e2b300fc34cf"),
                            Caption = "Prietenul pierdut",
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 749, DateTimeKind.Utc).AddTicks(6321),
                            ImageUrl = "images/tol/stories/pp-prietenul-pierdut/3.pierdut.png",
                            SortOrder = 3,
                            StoryDefinitionId = new Guid("44444444-4444-4444-4444-444444444444"),
                            Text = "„M-am pierdut”, spune iepurașul. „Nu plânge”, spune Puf-Puf. „Te voi duce pe potecă spre casă!”",
                            TileId = "3",
                            Type = "page",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 749, DateTimeKind.Utc).AddTicks(6322)
                        },
                        new
                        {
                            Id = new Guid("868df149-7978-443f-8f1f-5d84a02a979a"),
                            Caption = "Prin ploaie și pădure",
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 749, DateTimeKind.Utc).AddTicks(6328),
                            ImageUrl = "images/tol/stories/pp-prietenul_pierdut/4.ploaie-padure.png",
                            SortOrder = 4,
                            StoryDefinitionId = new Guid("44444444-4444-4444-4444-444444444444"),
                            Text = "Merg împreună prin pădure. Ploaia picură pe pietre. Puf-Puf ține umbrela. Iepurașul sare prin bălți: „Plip-plop!”",
                            TileId = "4",
                            Type = "page",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 749, DateTimeKind.Utc).AddTicks(6328)
                        },
                        new
                        {
                            Id = new Guid("8f6b611c-c43e-4b7b-bad6-224bdd2bcb02"),
                            Caption = "Poiana cu pană",
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 749, DateTimeKind.Utc).AddTicks(6331),
                            ImageUrl = "images/tol/stories/pp-prietenul-pierdut/5.poiana.png",
                            SortOrder = 5,
                            StoryDefinitionId = new Guid("44444444-4444-4444-4444-444444444444"),
                            Text = "Ajung într-o poiană plină de flori. Pe jos e o pană strălucitoare. „Poiana asta e aproape!”, spune iepurașul. Zâmbește cu putere.",
                            TileId = "5",
                            Type = "page",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 749, DateTimeKind.Utc).AddTicks(6332)
                        },
                        new
                        {
                            Id = new Guid("4b0bbfda-e884-460d-906b-6ba8f2aa2b21"),
                            Caption = "Povestea prieteniei",
                            CreatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 749, DateTimeKind.Utc).AddTicks(6342),
                            ImageUrl = "images/tol/stories/pp-prietenul-pierdut/6.final.png",
                            SortOrder = 6,
                            StoryDefinitionId = new Guid("44444444-4444-4444-4444-444444444444"),
                            Text = "„Mulțumesc, Puf-Puf!” „Prietenii se ajută!”, spune pisoiul. Ploaia se oprește. Pe cer, un curcubeu. P ca Puf-Puf, P ca prieten!",
                            TileId = "6",
                            Type = "page",
                            UpdatedAt = new DateTime(2025, 10, 31, 18, 51, 38, 749, DateTimeKind.Utc).AddTicks(6342)
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryTileTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Question")
                        .HasColumnType("text");

                    b.Property<Guid>("StoryTileId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StoryTileId", "LanguageCode")
                        .IsUnique();

                    b.ToTable("StoryTileTranslations");
                });

            modelBuilder.Entity("XooCreator.BA.Data.Tree", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CurrentTier")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("RootType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Trees");
                });

            modelBuilder.Entity("XooCreator.BA.Data.TreeChoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BranchType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Tier")
                        .HasColumnType("integer");

                    b.Property<string>("TraitAwarded")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TreeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TreeId", "Tier")
                        .IsUnique();

                    b.ToTable("TreeChoices");
                });

            modelBuilder.Entity("XooCreator.BA.Data.TreeConfiguration", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TreeConfigurations");
                });

            modelBuilder.Entity("XooCreator.BA.Data.TreeProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsUnlocked")
                        .HasColumnType("boolean");

                    b.Property<string>("RegionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TreeConfigurationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UnlockedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TreeConfigurationId");

                    b.HasIndex("UserId", "RegionId", "TreeConfigurationId")
                        .IsUnique();

                    b.ToTable("TreeProgress");
                });

            modelBuilder.Entity("XooCreator.BA.Data.TreeRegion", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PufpufMessage")
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("TreeConfigurationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TreeConfigurationId");

                    b.HasIndex("Id", "TreeConfigurationId")
                        .IsUnique();

                    b.ToTable("TreeRegions");
                });

            modelBuilder.Entity("XooCreator.BA.Data.TreeStoryNode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RegionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RewardImageUrl")
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("StoryId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TreeConfigurationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.HasIndex("TreeConfigurationId");

                    b.HasIndex("StoryId", "RegionId", "TreeConfigurationId")
                        .IsUnique();

                    b.ToTable("TreeStoryNodes");
                });

            modelBuilder.Entity("XooCreator.BA.Data.TreeUnlockRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FromId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("MinCount")
                        .HasColumnType("integer");

                    b.Property<string>("RequiredStoriesCsv")
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("StoryId")
                        .HasColumnType("text");

                    b.Property<string>("ToRegionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TreeConfigurationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TreeConfigurationId");

                    b.ToTable("TreeUnlockRules");
                });

            modelBuilder.Entity("XooCreator.BA.Data.UserBestiary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BestiaryItemId")
                        .HasColumnType("uuid");

                    b.Property<string>("BestiaryType")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("DiscoveredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BestiaryItemId");

                    b.HasIndex("UserId", "BestiaryItemId", "BestiaryType")
                        .IsUnique();

                    b.ToTable("UserBestiary", (string)null);
                });

            modelBuilder.Entity("XooCreator.BA.Data.UserCreatedStories", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreationNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("StoryDefinitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StoryDefinitionId");

                    b.HasIndex("UserId", "StoryDefinitionId")
                        .IsUnique();

                    b.ToTable("UserCreatedStories");
                });

            modelBuilder.Entity("XooCreator.BA.Data.UserOwnedStories", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("PurchaseReference")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("PurchasedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("StoryDefinitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StoryDefinitionId");

                    b.HasIndex("UserId", "StoryDefinitionId")
                        .IsUnique();

                    b.ToTable("UserOwnedStories");
                });

            modelBuilder.Entity("XooCreator.BA.Data.UserStoryReadProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ReadAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("StoryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TileId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "StoryId", "TileId")
                        .IsUnique();

                    b.ToTable("UserStoryReadProgress");
                });

            modelBuilder.Entity("XooCreator.BA.Data.UserTokenBalance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Type", "Value")
                        .IsUnique();

                    b.ToTable("UserTokenBalances");
                });

            modelBuilder.Entity("XooCreator.BA.Data.Animal", b =>
                {
                    b.HasOne("XooCreator.BA.Data.Region", "Region")
                        .WithMany("Animals")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("XooCreator.BA.Data.AnimalPartSupport", b =>
                {
                    b.HasOne("XooCreator.BA.Data.Animal", "Animal")
                        .WithMany("SupportedParts")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XooCreator.BA.Data.BodyPart", "Part")
                        .WithMany()
                        .HasForeignKey("PartKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("XooCreator.BA.Data.AnimalTranslation", b =>
                {
                    b.HasOne("XooCreator.BA.Data.Animal", "Animal")
                        .WithMany("Translations")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");
                });

            modelBuilder.Entity("XooCreator.BA.Data.BodyPartTranslation", b =>
                {
                    b.HasOne("XooCreator.BA.Data.BodyPart", "BodyPart")
                        .WithMany("Translations")
                        .HasForeignKey("BodyPartKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BodyPart");
                });

            modelBuilder.Entity("XooCreator.BA.Data.Creature", b =>
                {
                    b.HasOne("XooCreator.BA.Data.Tree", "Tree")
                        .WithMany()
                        .HasForeignKey("TreeId");

                    b.HasOne("XooCreator.BA.Data.AlchimaliaUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tree");

                    b.Navigation("User");
                });

            modelBuilder.Entity("XooCreator.BA.Data.CreditTransaction", b =>
                {
                    b.HasOne("XooCreator.BA.Data.AlchimaliaUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("XooCreator.BA.Data.CreditWallet", b =>
                {
                    b.HasOne("XooCreator.BA.Data.AlchimaliaUser", "User")
                        .WithOne()
                        .HasForeignKey("XooCreator.BA.Data.CreditWallet", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("XooCreator.BA.Data.HeroDefinitionTranslation", b =>
                {
                    b.HasOne("XooCreator.BA.Data.HeroDefinition", "HeroDefinition")
                        .WithMany("Translations")
                        .HasForeignKey("HeroDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HeroDefinition");
                });

            modelBuilder.Entity("XooCreator.BA.Data.HeroProgress", b =>
                {
                    b.HasOne("XooCreator.BA.Data.AlchimaliaUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("XooCreator.BA.Data.HeroTreeProgress", b =>
                {
                    b.HasOne("XooCreator.BA.Data.AlchimaliaUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("XooCreator.BA.Data.Job", b =>
                {
                    b.HasOne("XooCreator.BA.Data.AlchimaliaUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryAnswer", b =>
                {
                    b.HasOne("XooCreator.BA.Data.StoryTile", "StoryTile")
                        .WithMany("Answers")
                        .HasForeignKey("StoryTileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoryTile");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryAnswerToken", b =>
                {
                    b.HasOne("XooCreator.BA.Data.StoryAnswer", "StoryAnswer")
                        .WithMany("Tokens")
                        .HasForeignKey("StoryAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoryAnswer");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryAnswerTranslation", b =>
                {
                    b.HasOne("XooCreator.BA.Data.StoryAnswer", "StoryAnswer")
                        .WithMany("Translations")
                        .HasForeignKey("StoryAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoryAnswer");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryDefinitionTranslation", b =>
                {
                    b.HasOne("XooCreator.BA.Data.StoryDefinition", "StoryDefinition")
                        .WithMany("Translations")
                        .HasForeignKey("StoryDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoryDefinition");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryHeroUnlock", b =>
                {
                    b.HasOne("XooCreator.BA.Data.StoryHero", "StoryHero")
                        .WithMany("StoryUnlocks")
                        .HasForeignKey("StoryHeroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoryHero");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryMarketplaceInfo", b =>
                {
                    b.HasOne("XooCreator.BA.Data.StoryDefinition", "Story")
                        .WithMany()
                        .HasForeignKey("StoryId")
                        .HasPrincipalKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Story");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryProgress", b =>
                {
                    b.HasOne("XooCreator.BA.Data.TreeConfiguration", "TreeConfiguration")
                        .WithMany()
                        .HasForeignKey("TreeConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XooCreator.BA.Data.AlchimaliaUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TreeConfiguration");

                    b.Navigation("User");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryPurchase", b =>
                {
                    b.HasOne("XooCreator.BA.Data.StoryDefinition", "Story")
                        .WithMany()
                        .HasForeignKey("StoryId")
                        .HasPrincipalKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XooCreator.BA.Data.AlchimaliaUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Story");

                    b.Navigation("User");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryTile", b =>
                {
                    b.HasOne("XooCreator.BA.Data.StoryDefinition", "StoryDefinition")
                        .WithMany("Tiles")
                        .HasForeignKey("StoryDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoryDefinition");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryTileTranslation", b =>
                {
                    b.HasOne("XooCreator.BA.Data.StoryTile", "StoryTile")
                        .WithMany("Translations")
                        .HasForeignKey("StoryTileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoryTile");
                });

            modelBuilder.Entity("XooCreator.BA.Data.Tree", b =>
                {
                    b.HasOne("XooCreator.BA.Data.AlchimaliaUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("XooCreator.BA.Data.TreeChoice", b =>
                {
                    b.HasOne("XooCreator.BA.Data.Tree", "Tree")
                        .WithMany("Choices")
                        .HasForeignKey("TreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tree");
                });

            modelBuilder.Entity("XooCreator.BA.Data.TreeProgress", b =>
                {
                    b.HasOne("XooCreator.BA.Data.TreeConfiguration", "TreeConfiguration")
                        .WithMany()
                        .HasForeignKey("TreeConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XooCreator.BA.Data.AlchimaliaUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TreeConfiguration");

                    b.Navigation("User");
                });

            modelBuilder.Entity("XooCreator.BA.Data.TreeRegion", b =>
                {
                    b.HasOne("XooCreator.BA.Data.TreeConfiguration", "TreeConfiguration")
                        .WithMany()
                        .HasForeignKey("TreeConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TreeConfiguration");
                });

            modelBuilder.Entity("XooCreator.BA.Data.TreeStoryNode", b =>
                {
                    b.HasOne("XooCreator.BA.Data.TreeRegion", "Region")
                        .WithMany("Stories")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XooCreator.BA.Data.StoryDefinition", "StoryDefinition")
                        .WithMany()
                        .HasForeignKey("StoryId")
                        .HasPrincipalKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XooCreator.BA.Data.TreeConfiguration", "TreeConfiguration")
                        .WithMany()
                        .HasForeignKey("TreeConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");

                    b.Navigation("StoryDefinition");

                    b.Navigation("TreeConfiguration");
                });

            modelBuilder.Entity("XooCreator.BA.Data.TreeUnlockRule", b =>
                {
                    b.HasOne("XooCreator.BA.Data.TreeConfiguration", "TreeConfiguration")
                        .WithMany()
                        .HasForeignKey("TreeConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TreeConfiguration");
                });

            modelBuilder.Entity("XooCreator.BA.Data.UserBestiary", b =>
                {
                    b.HasOne("XooCreator.BA.Data.BestiaryItem", "BestiaryItem")
                        .WithMany()
                        .HasForeignKey("BestiaryItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XooCreator.BA.Data.AlchimaliaUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BestiaryItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("XooCreator.BA.Data.UserCreatedStories", b =>
                {
                    b.HasOne("XooCreator.BA.Data.StoryDefinition", "StoryDefinition")
                        .WithMany()
                        .HasForeignKey("StoryDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XooCreator.BA.Data.AlchimaliaUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoryDefinition");

                    b.Navigation("User");
                });

            modelBuilder.Entity("XooCreator.BA.Data.UserOwnedStories", b =>
                {
                    b.HasOne("XooCreator.BA.Data.StoryDefinition", "StoryDefinition")
                        .WithMany()
                        .HasForeignKey("StoryDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XooCreator.BA.Data.AlchimaliaUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoryDefinition");

                    b.Navigation("User");
                });

            modelBuilder.Entity("XooCreator.BA.Data.UserStoryReadProgress", b =>
                {
                    b.HasOne("XooCreator.BA.Data.AlchimaliaUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("XooCreator.BA.Data.UserTokenBalance", b =>
                {
                    b.HasOne("XooCreator.BA.Data.AlchimaliaUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("XooCreator.BA.Data.Animal", b =>
                {
                    b.Navigation("SupportedParts");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("XooCreator.BA.Data.BodyPart", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("XooCreator.BA.Data.HeroDefinition", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("XooCreator.BA.Data.Region", b =>
                {
                    b.Navigation("Animals");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryAnswer", b =>
                {
                    b.Navigation("Tokens");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryDefinition", b =>
                {
                    b.Navigation("Tiles");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryHero", b =>
                {
                    b.Navigation("StoryUnlocks");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryTile", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("XooCreator.BA.Data.Tree", b =>
                {
                    b.Navigation("Choices");
                });

            modelBuilder.Entity("XooCreator.BA.Data.TreeRegion", b =>
                {
                    b.Navigation("Stories");
                });
#pragma warning restore 612, 618
        }
    }
}
