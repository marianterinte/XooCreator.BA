// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using XooCreator.BA.Data;

#nullable disable

namespace XooCreator.BA.Migrations
{
    [DbContext(typeof(XooDbContext))]
    [Migration("20251031191730_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("XooCreator.BA.Data.AlchimaliaUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Auth0Id")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("HasVisitedImaginationLaboratory")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Picture")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Auth0Id")
                        .IsUnique();

                    b.ToTable("AlchimaliaUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Auth0Id = "test-user-sub",
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 678, DateTimeKind.Utc).AddTicks(1449),
                            Email = "test@example.com",
                            HasVisitedImaginationLaboratory = false,
                            LastLoginAt = new DateTime(2025, 10, 31, 19, 17, 29, 678, DateTimeKind.Utc).AddTicks(1450),
                            Name = "Test User",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 678, DateTimeKind.Utc).AddTicks(1451)
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Auth0Id = "marian-test-sub",
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 678, DateTimeKind.Utc).AddTicks(1455),
                            Email = "marian@example.com",
                            HasVisitedImaginationLaboratory = false,
                            LastLoginAt = new DateTime(2025, 10, 31, 19, 17, 29, 678, DateTimeKind.Utc).AddTicks(1456),
                            Name = "Marian",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 678, DateTimeKind.Utc).AddTicks(1456)
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Auth0Id = "alchimalia-admin-sub",
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 678, DateTimeKind.Utc).AddTicks(1460),
                            Email = "alchimalia@admin.com",
                            HasVisitedImaginationLaboratory = false,
                            LastLoginAt = new DateTime(2025, 10, 31, 19, 17, 29, 678, DateTimeKind.Utc).AddTicks(1460),
                            Name = "Marian Teacher",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 678, DateTimeKind.Utc).AddTicks(1461)
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.Animal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsHybrid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Src")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Animals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            IsHybrid = false,
                            Label = "Bunny",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000003"),
                            Src = "images/animals/base/bunny.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            IsHybrid = false,
                            Label = "Hippo",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000006"),
                            Src = "images/animals/base/hippo.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            IsHybrid = false,
                            Label = "Giraffe",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000004"),
                            Src = "images/animals/base/giraffe.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            IsHybrid = false,
                            Label = "Dog",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000003"),
                            Src = "images/animals/base/dog.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            IsHybrid = false,
                            Label = "Fox",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000005"),
                            Src = "images/animals/base/fox.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            IsHybrid = false,
                            Label = "Cat",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000003"),
                            Src = "images/animals/base/cat.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            IsHybrid = false,
                            Label = "Monkey",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000002"),
                            Src = "images/animals/base/monkey.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            IsHybrid = false,
                            Label = "Camel",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000001"),
                            Src = "images/animals/base/camel.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            IsHybrid = false,
                            Label = "Deer",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000005"),
                            Src = "images/animals/base/deer.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000a"),
                            IsHybrid = false,
                            Label = "Duck",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000006"),
                            Src = "images/animals/base/duck.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000b"),
                            IsHybrid = false,
                            Label = "Eagle",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000007"),
                            Src = "images/animals/base/eagle.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000c"),
                            IsHybrid = false,
                            Label = "Elephant",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000004"),
                            Src = "images/animals/base/elephant.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000d"),
                            IsHybrid = false,
                            Label = "Ostrich",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000004"),
                            Src = "images/animals/base/ostrich.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000e"),
                            IsHybrid = false,
                            Label = "Parrot",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000002"),
                            Src = "images/animals/base/parrot.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000f"),
                            IsHybrid = false,
                            Label = "Jaguar",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000002"),
                            Src = "images/animals/base/jaguar.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            IsHybrid = false,
                            Label = "Toucan",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000002"),
                            Src = "images/animals/base/toucan.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            IsHybrid = false,
                            Label = "Anaconda",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000002"),
                            Src = "images/animals/base/anaconda.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            IsHybrid = false,
                            Label = "Capuchin Monkey",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000002"),
                            Src = "images/animals/base/capuchin_monkey.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            IsHybrid = false,
                            Label = "Poison Dart Frog",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000002"),
                            Src = "images/animals/base/poison_dart_frog.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000014"),
                            IsHybrid = false,
                            Label = "Lion",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000004"),
                            Src = "images/animals/base/lion.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000015"),
                            IsHybrid = false,
                            Label = "African Elephant",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000004"),
                            Src = "images/animals/base/african_elephant.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000016"),
                            IsHybrid = false,
                            Label = "Giraffe",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000004"),
                            Src = "images/animals/base/giraffe.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000017"),
                            IsHybrid = false,
                            Label = "Zebra",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000004"),
                            Src = "images/animals/base/zebra.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000018"),
                            IsHybrid = false,
                            Label = "Rhinoceros",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000004"),
                            Src = "images/animals/base/rhinoceros.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000019"),
                            IsHybrid = false,
                            Label = "Bison",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000007"),
                            Src = "images/animals/base/bison.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000001a"),
                            IsHybrid = false,
                            Label = "Saiga Antelope",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000004"),
                            Src = "images/animals/base/saiga_antelope.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000001b"),
                            IsHybrid = false,
                            Label = "Gray Wolf",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000005"),
                            Src = "images/animals/base/gray_wolf.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000001c"),
                            IsHybrid = false,
                            Label = "Przewalski's Horse",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000007"),
                            Src = "images/animals/base/przewalski_horse.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000001d"),
                            IsHybrid = false,
                            Label = "Steppe Eagle",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000007"),
                            Src = "images/animals/base/steppe_eagle.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000001e"),
                            IsHybrid = false,
                            Label = "Cow",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000003"),
                            Src = "images/animals/base/cow.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000001f"),
                            IsHybrid = false,
                            Label = "Sheep",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000003"),
                            Src = "images/animals/base/sheep.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000020"),
                            IsHybrid = false,
                            Label = "Horse",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000003"),
                            Src = "images/animals/base/horse.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000021"),
                            IsHybrid = false,
                            Label = "Chicken",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000003"),
                            Src = "images/animals/base/chicken.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000022"),
                            IsHybrid = false,
                            Label = "Pig",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000003"),
                            Src = "images/animals/base/pig.jpg"
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.AnimalPartSupport", b =>
                {
                    b.Property<Guid>("AnimalId")
                        .HasColumnType("uuid");

                    b.Property<string>("PartKey")
                        .HasColumnType("character varying(32)");

                    b.HasKey("AnimalId", "PartKey");

                    b.HasIndex("PartKey");

                    b.ToTable("AnimalPartSupports");

                    b.HasData(
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000001"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000001"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000001"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000002"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000002"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000002"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000003"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000003"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000003"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000003"),
                            PartKey = "legs"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000003"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000003"),
                            PartKey = "horn"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000003"),
                            PartKey = "horns"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000004"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000004"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000004"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000005"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000005"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000005"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000006"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000006"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000006"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000007"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000007"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000007"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000008"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000008"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000008"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000009"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000009"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000009"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000009"),
                            PartKey = "legs"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000009"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000009"),
                            PartKey = "horn"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000009"),
                            PartKey = "horns"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000a"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000a"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000a"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000a"),
                            PartKey = "legs"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000a"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000a"),
                            PartKey = "wings"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000b"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000b"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000b"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000b"),
                            PartKey = "legs"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000b"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000b"),
                            PartKey = "wings"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000c"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000c"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000c"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000d"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000d"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000d"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000d"),
                            PartKey = "legs"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000d"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000d"),
                            PartKey = "wings"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000e"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000e"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000e"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000e"),
                            PartKey = "legs"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000e"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000e"),
                            PartKey = "wings"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000f"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000f"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000f"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000010"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000010"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000010"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000010"),
                            PartKey = "legs"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000010"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000010"),
                            PartKey = "wings"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000011"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000011"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000011"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000012"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000012"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000012"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000013"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000013"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000013"),
                            PartKey = "legs"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000013"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000014"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000014"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000014"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000015"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000015"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000015"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000016"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000016"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000016"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000016"),
                            PartKey = "legs"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000016"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000017"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000017"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000017"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000017"),
                            PartKey = "legs"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000017"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000018"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000018"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000018"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000018"),
                            PartKey = "legs"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000018"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000018"),
                            PartKey = "horn"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000019"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000019"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000019"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001a"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001a"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001a"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001a"),
                            PartKey = "legs"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001a"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001a"),
                            PartKey = "horns"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001b"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001b"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001b"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001c"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001c"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001c"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001c"),
                            PartKey = "legs"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001c"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001d"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001d"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001d"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001d"),
                            PartKey = "legs"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001d"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001d"),
                            PartKey = "wings"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001e"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001e"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001e"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001f"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001f"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001f"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000020"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000020"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000020"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000020"),
                            PartKey = "legs"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000020"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000021"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000021"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000021"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000021"),
                            PartKey = "legs"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000021"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000021"),
                            PartKey = "wings"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000022"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000022"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000022"),
                            PartKey = "arms"
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.AnimalTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AnimalId")
                        .HasColumnType("uuid");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId", "LanguageCode")
                        .IsUnique();

                    b.ToTable("AnimalTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9f8c3965-dbb9-4400-bfd2-e8a73aaa54db"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Label = "Bunny",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("e11d96c9-5fc0-462e-8416-d412e6341e78"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Label = "Hippo",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("653b6eeb-40fb-4306-aad3-ead4e887ed12"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000003"),
                            Label = "Giraffe",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("916f6cd7-085e-4843-bf2a-e4bab560bb4b"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000004"),
                            Label = "Dog",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("553b33fe-3bd8-41ea-b5ec-7aef7bd13381"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000005"),
                            Label = "Fox",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("dc669001-0e19-4629-abe1-3301e7575121"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000006"),
                            Label = "Cat",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("d118e04e-960b-418b-b2d6-81f9be84efea"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000007"),
                            Label = "Monkey",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("b9b216e4-f43f-4a79-852a-0ebf9892b861"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000008"),
                            Label = "Camel",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("07b01e7a-3c02-48a5-921e-1a347f470e68"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000009"),
                            Label = "Deer",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("29804148-40c9-4e5c-9d54-b96f6d41b4ff"),
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000a"),
                            Label = "Duck",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("02449e64-00fc-4637-998c-abc3c752856e"),
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000b"),
                            Label = "Eagle",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("fc4d6350-3775-4961-87e0-c7a81c95b0d6"),
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000c"),
                            Label = "Elephant",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("8d1da5bd-806e-4079-a691-5043c1f87f5c"),
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000d"),
                            Label = "Ostrich",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("2dfc58c9-f2b5-4e97-bddb-836a1bf02ad5"),
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000e"),
                            Label = "Parrot",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("f010aa18-6311-4266-b3b8-a22c668d49e5"),
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000f"),
                            Label = "Jaguar",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("53745b15-23cd-4bed-b8db-f32984fad527"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000010"),
                            Label = "Toucan",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("f54d7365-50b8-4836-a067-9123bea70244"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000011"),
                            Label = "Anaconda",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("746bb1c3-cb0d-4359-ac35-cad0598cd18e"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000012"),
                            Label = "Capuchin Monkey",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("e87b3d80-fe38-458e-96f8-4ef208b9be23"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000013"),
                            Label = "Poison Dart Frog",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("25c8693c-5210-4f8f-aabc-222632718495"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000014"),
                            Label = "Lion",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("e87b5e77-7bb3-4270-af6b-6b837305526d"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000015"),
                            Label = "African Elephant",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("ad862d22-0e9e-4aa5-8702-9e81369a62f2"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000016"),
                            Label = "Giraffe",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("5757a68e-9e4b-4d42-a6b0-01b745dff537"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000017"),
                            Label = "Zebra",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("f0d3203b-a36f-4fff-bf1c-3921a996519e"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000018"),
                            Label = "Rhinoceros",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("75733b93-3c73-4b51-b0f0-5103bb38404f"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000019"),
                            Label = "Bison",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("8e39125c-ab67-4af8-b6a9-611c317ee398"),
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001a"),
                            Label = "Saiga Antelope",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("7fbfec50-1fdf-458f-a576-774956720f2c"),
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001b"),
                            Label = "Gray Wolf",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("27f56641-9ffb-4441-bc41-05afcd4fd0f1"),
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001c"),
                            Label = "Przewalski's Horse",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("df8978fe-b1b9-4281-9c55-2b8980301b33"),
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001d"),
                            Label = "Steppe Eagle",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("55bbfbed-57ea-468a-93a1-044351fcf143"),
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001e"),
                            Label = "Cow",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("5692bf17-65e1-490b-ba58-331486ffc13d"),
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001f"),
                            Label = "Sheep",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("939d46ae-d55e-4af6-b349-e066a6cc4974"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000020"),
                            Label = "Horse",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("d1d8eeca-a900-488e-8bb6-dd2b51e8556f"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000021"),
                            Label = "Chicken",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("333674fb-5c44-4596-881e-55d4943af36e"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000022"),
                            Label = "Pig",
                            LanguageCode = "en-us"
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.BestiaryItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ArmsKey")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("BodyKey")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HeadKey")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Story")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.HasKey("Id");

                    b.ToTable("BestiaryItems");
                });

            modelBuilder.Entity("XooCreator.BA.Data.BodyPart", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("IsBaseLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Key");

                    b.ToTable("BodyParts");

                    b.HasData(
                        new
                        {
                            Key = "head",
                            Image = "images/bodyparts/face.webp",
                            IsBaseLocked = false,
                            Name = "Head"
                        },
                        new
                        {
                            Key = "body",
                            Image = "images/bodyparts/body.webp",
                            IsBaseLocked = false,
                            Name = "Body"
                        },
                        new
                        {
                            Key = "arms",
                            Image = "images/bodyparts/hands.webp",
                            IsBaseLocked = false,
                            Name = "Arms"
                        },
                        new
                        {
                            Key = "legs",
                            Image = "images/bodyparts/legs.webp",
                            IsBaseLocked = true,
                            Name = "Legs"
                        },
                        new
                        {
                            Key = "tail",
                            Image = "images/bodyparts/tail.webp",
                            IsBaseLocked = true,
                            Name = "Tail"
                        },
                        new
                        {
                            Key = "wings",
                            Image = "images/bodyparts/wings.webp",
                            IsBaseLocked = true,
                            Name = "Wings"
                        },
                        new
                        {
                            Key = "horn",
                            Image = "images/bodyparts/horn.webp",
                            IsBaseLocked = true,
                            Name = "Horn"
                        },
                        new
                        {
                            Key = "horns",
                            Image = "images/bodyparts/horns.webp",
                            IsBaseLocked = true,
                            Name = "Horns"
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.BodyPartTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BodyPartKey")
                        .IsRequired()
                        .HasColumnType("character varying(32)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BodyPartKey", "LanguageCode")
                        .IsUnique();

                    b.ToTable("BodyPartTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1a0170a3-7e0e-4800-be49-057d8e5f803e"),
                            BodyPartKey = "head",
                            LanguageCode = "en-us",
                            Name = "Head"
                        },
                        new
                        {
                            Id = new Guid("41d9e495-41b1-4f89-94af-e5715cc9bfba"),
                            BodyPartKey = "body",
                            LanguageCode = "en-us",
                            Name = "Body"
                        },
                        new
                        {
                            Id = new Guid("5da4675c-4f15-4c6c-9ff3-d7fe1beedbe9"),
                            BodyPartKey = "arms",
                            LanguageCode = "en-us",
                            Name = "Arms"
                        },
                        new
                        {
                            Id = new Guid("245c626d-df09-426d-a33f-bba9b23f5461"),
                            BodyPartKey = "legs",
                            LanguageCode = "en-us",
                            Name = "Legs"
                        },
                        new
                        {
                            Id = new Guid("e527e999-67bc-4c98-bc4d-57458d576a68"),
                            BodyPartKey = "tail",
                            LanguageCode = "en-us",
                            Name = "Tail"
                        },
                        new
                        {
                            Id = new Guid("f422a125-108c-40b5-9a88-1da600c5473c"),
                            BodyPartKey = "wings",
                            LanguageCode = "en-us",
                            Name = "Wings"
                        },
                        new
                        {
                            Id = new Guid("d9e08443-89da-45a5-a0e9-219d2f651694"),
                            BodyPartKey = "horn",
                            LanguageCode = "en-us",
                            Name = "Horn"
                        },
                        new
                        {
                            Id = new Guid("a135599f-a4ef-4779-9285-f0779f007938"),
                            BodyPartKey = "horns",
                            LanguageCode = "en-us",
                            Name = "Horns"
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.BuilderConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BaseUnlockedAnimalIds")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BaseUnlockedBodyPartKeys")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BuilderConfigs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BaseUnlockedAnimalIds = "[\"00000000-0000-0000-0000-000000000001\",\"00000000-0000-0000-0000-000000000002\",\"00000000-0000-0000-0000-000000000003\"]",
                            BaseUnlockedBodyPartKeys = "[\"head\",\"body\",\"arms\"]"
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.Creature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Archetype")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PromptUsedJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Rarity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Story")
                        .HasColumnType("text");

                    b.Property<string>("ThumbUrl")
                        .HasColumnType("text");

                    b.Property<string>("TraitsJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TreeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TreeId");

                    b.HasIndex("UserId");

                    b.ToTable("Creatures");
                });

            modelBuilder.Entity("XooCreator.BA.Data.CreditTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Reference")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CreditTransactions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Amount = 15,
                            CreatedAt = new DateTime(2025, 10, 30, 19, 17, 29, 678, DateTimeKind.Utc).AddTicks(1685),
                            Reference = "test-purchase-marian",
                            Type = 0,
                            UserId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            Amount = -5,
                            CreatedAt = new DateTime(2025, 10, 31, 17, 17, 29, 678, DateTimeKind.Utc).AddTicks(1696),
                            Reference = "test-generation",
                            Type = 1,
                            UserId = new Guid("22222222-2222-2222-2222-222222222222")
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.CreditWallet", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Balance")
                        .HasColumnType("integer");

                    b.Property<int>("DiscoveryBalance")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId");

                    b.ToTable("CreditWallets");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Balance = 5,
                            DiscoveryBalance = 0,
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 678, DateTimeKind.Utc).AddTicks(1592)
                        },
                        new
                        {
                            UserId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Balance = 5,
                            DiscoveryBalance = 0,
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 678, DateTimeKind.Utc).AddTicks(1595)
                        },
                        new
                        {
                            UserId = new Guid("33333333-3333-3333-3333-333333333333"),
                            Balance = 1000,
                            DiscoveryBalance = 0,
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 678, DateTimeKind.Utc).AddTicks(1596)
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.HeroClickMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AudioUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HeroId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("MessageKey")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("HeroId")
                        .IsUnique();

                    b.ToTable("HeroClickMessages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("414d321e-ae38-4345-9fce-5685f4b83948"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/puf-puf/hero_puf-puf_click_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 665, DateTimeKind.Utc).AddTicks(794),
                            HeroId = "puf-puf",
                            IsActive = true,
                            MessageKey = "hero_puf-puf_click_message",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 665, DateTimeKind.Utc).AddTicks(795)
                        },
                        new
                        {
                            Id = new Guid("c3c9ee4a-29d1-4e76-98d6-f756e52ee121"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/linkaro/hero_linkaro_click_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 665, DateTimeKind.Utc).AddTicks(828),
                            HeroId = "linkaro",
                            IsActive = true,
                            MessageKey = "hero_linkaro_click_message",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 665, DateTimeKind.Utc).AddTicks(829)
                        },
                        new
                        {
                            Id = new Guid("eaad69da-9c5f-41e3-b8d6-3b478c0c4620"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/grubot/hero_grubot_click_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 665, DateTimeKind.Utc).AddTicks(849),
                            HeroId = "grubot",
                            IsActive = true,
                            MessageKey = "hero_grubot_click_message",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 665, DateTimeKind.Utc).AddTicks(850)
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.HeroDefinition", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("CourageCost")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreativityCost")
                        .HasColumnType("integer");

                    b.Property<int>("CuriosityCost")
                        .HasColumnType("integer");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsUnlocked")
                        .HasColumnType("boolean");

                    b.Property<double>("PositionX")
                        .HasColumnType("decimal(10,6)");

                    b.Property<double>("PositionY")
                        .HasColumnType("decimal(10,6)");

                    b.Property<string>("PrerequisitesJson")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("RewardsJson")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("SafetyCost")
                        .HasColumnType("integer");

                    b.Property<int>("ThinkingCost")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("HeroDefinitions");

                    b.HasData(
                        new
                        {
                            Id = "puf-puf",
                            CourageCost = 0,
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 665, DateTimeKind.Utc).AddTicks(2039),
                            CreativityCost = 0,
                            CuriosityCost = 0,
                            Image = "images/heroes/pufpufblink.gif",
                            IsUnlocked = false,
                            PositionX = 0.0,
                            PositionY = 0.0,
                            PrerequisitesJson = "[]",
                            RewardsJson = "[]",
                            SafetyCost = 0,
                            ThinkingCost = 0,
                            Type = "STORY_HERO",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 665, DateTimeKind.Utc).AddTicks(2044)
                        },
                        new
                        {
                            Id = "linkaro",
                            CourageCost = 0,
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 665, DateTimeKind.Utc).AddTicks(2070),
                            CreativityCost = 0,
                            CuriosityCost = 0,
                            Image = "images/heroes/linkaro.png",
                            IsUnlocked = false,
                            PositionX = 0.0,
                            PositionY = 0.0,
                            PrerequisitesJson = "[]",
                            RewardsJson = "[]",
                            SafetyCost = 0,
                            ThinkingCost = 0,
                            Type = "STORY_HERO",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 665, DateTimeKind.Utc).AddTicks(2071)
                        },
                        new
                        {
                            Id = "grubot",
                            CourageCost = 0,
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 665, DateTimeKind.Utc).AddTicks(2075),
                            CreativityCost = 0,
                            CuriosityCost = 0,
                            Image = "images/heroes/grubot.png",
                            IsUnlocked = false,
                            PositionX = 0.0,
                            PositionY = 0.0,
                            PrerequisitesJson = "[]",
                            RewardsJson = "[]",
                            SafetyCost = 0,
                            ThinkingCost = 0,
                            Type = "STORY_HERO",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 665, DateTimeKind.Utc).AddTicks(2076)
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.HeroDefinitionTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HeroDefinitionId")
                        .IsRequired()
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Story")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("HeroDefinitionId", "LanguageCode")
                        .IsUnique();

                    b.ToTable("HeroDefinitionTranslations");
                });

            modelBuilder.Entity("XooCreator.BA.Data.HeroMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AudioUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HeroId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("MessageKey")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("RegionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("HeroId", "RegionId")
                        .IsUnique();

                    b.ToTable("HeroMessages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cdd29897-3bc6-4203-917a-0bf6402bd0ef"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/puf-puf/hero_puf-puf_region_gateway_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(7960),
                            HeroId = "puf-puf",
                            IsActive = true,
                            MessageKey = "hero_puf-puf_region_gateway_message",
                            RegionId = "gateway",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(7961)
                        },
                        new
                        {
                            Id = new Guid("cf57e9c5-a146-482f-80e4-1b7eadccce84"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/puf-puf/hero_puf-puf_region_terra_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(7976),
                            HeroId = "puf-puf",
                            IsActive = true,
                            MessageKey = "hero_puf-puf_region_terra_message",
                            RegionId = "terra",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(7976)
                        },
                        new
                        {
                            Id = new Guid("4506ca63-b79b-487e-a67c-116464eb1d54"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/puf-puf/hero_puf-puf_region_lunaria_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(7981),
                            HeroId = "puf-puf",
                            IsActive = true,
                            MessageKey = "hero_puf-puf_region_lunaria_message",
                            RegionId = "lunaria",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(7981)
                        },
                        new
                        {
                            Id = new Guid("944e0d0f-077f-453a-95f3-eed1bb305298"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/puf-puf/hero_puf-puf_region_oceanica_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(7985),
                            HeroId = "puf-puf",
                            IsActive = true,
                            MessageKey = "hero_puf-puf_region_oceanica_message",
                            RegionId = "oceanica",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(7986)
                        },
                        new
                        {
                            Id = new Guid("a3144474-1de2-4664-abde-66e19610e349"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/puf-puf/hero_puf-puf_region_sylvaria_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(7989),
                            HeroId = "puf-puf",
                            IsActive = true,
                            MessageKey = "hero_puf-puf_region_sylvaria_message",
                            RegionId = "sylvaria",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(7990)
                        },
                        new
                        {
                            Id = new Guid("67bcb3d9-9fc0-4c77-a148-0534741e78cf"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/puf-puf/hero_puf-puf_region_crystalia_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8040),
                            HeroId = "puf-puf",
                            IsActive = true,
                            MessageKey = "hero_puf-puf_region_crystalia_message",
                            RegionId = "crystalia",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8041)
                        },
                        new
                        {
                            Id = new Guid("e8fdf914-37bd-45a6-889b-9c1b651cf75c"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/puf-puf/hero_puf-puf_region_zephyra_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8055),
                            HeroId = "puf-puf",
                            IsActive = true,
                            MessageKey = "hero_puf-puf_region_zephyra_message",
                            RegionId = "zephyra",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8056)
                        },
                        new
                        {
                            Id = new Guid("3eac5651-2488-48eb-aeea-d3801e727b0f"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/puf-puf/hero_puf-puf_region_pyron_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8059),
                            HeroId = "puf-puf",
                            IsActive = true,
                            MessageKey = "hero_puf-puf_region_pyron_message",
                            RegionId = "pyron",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8060)
                        },
                        new
                        {
                            Id = new Guid("8ae14996-1717-4dd3-9b2e-81a1e24cedce"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/puf-puf/hero_puf-puf_region_neptunia_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8063),
                            HeroId = "puf-puf",
                            IsActive = true,
                            MessageKey = "hero_puf-puf_region_neptunia_message",
                            RegionId = "neptunia",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8063)
                        },
                        new
                        {
                            Id = new Guid("5bf7fb63-45eb-485a-b676-4f32df31d54c"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/puf-puf/hero_puf-puf_region_aetherion_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8069),
                            HeroId = "puf-puf",
                            IsActive = true,
                            MessageKey = "hero_puf-puf_region_aetherion_message",
                            RegionId = "aetherion",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8069)
                        },
                        new
                        {
                            Id = new Guid("58387b79-aa04-4b0a-8965-c6a2c2073790"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/puf-puf/hero_puf-puf_region_kelo_ketis_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8073),
                            HeroId = "puf-puf",
                            IsActive = true,
                            MessageKey = "hero_puf-puf_region_kelo_ketis_message",
                            RegionId = "kelo-ketis",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8074)
                        },
                        new
                        {
                            Id = new Guid("c50a5d08-ca4f-44f6-91a0-8dcba1ceb5f4"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/linkaro/hero_linkaro_region_gateway_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8082),
                            HeroId = "linkaro",
                            IsActive = true,
                            MessageKey = "hero_linkaro_region_gateway_message",
                            RegionId = "gateway",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8082)
                        },
                        new
                        {
                            Id = new Guid("7540f978-c11d-4d75-a4c9-240393d1da84"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/linkaro/hero_linkaro_region_terra_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8085),
                            HeroId = "linkaro",
                            IsActive = true,
                            MessageKey = "hero_linkaro_region_terra_message",
                            RegionId = "terra",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8086)
                        },
                        new
                        {
                            Id = new Guid("80f3a652-f1e7-4dc6-84b0-e74e17548aaa"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/linkaro/hero_linkaro_region_lunaria_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8089),
                            HeroId = "linkaro",
                            IsActive = true,
                            MessageKey = "hero_linkaro_region_lunaria_message",
                            RegionId = "lunaria",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8090)
                        },
                        new
                        {
                            Id = new Guid("483fd2cf-cff1-4d29-acb3-b1b0161252f2"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/linkaro/hero_linkaro_region_mechanika_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8096),
                            HeroId = "linkaro",
                            IsActive = true,
                            MessageKey = "hero_linkaro_region_mechanika_message",
                            RegionId = "mechanika",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8096)
                        },
                        new
                        {
                            Id = new Guid("aaa1c504-48fb-4c87-bb74-b20e651be6ed"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/linkaro/hero_linkaro_region_oceanica_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8099),
                            HeroId = "linkaro",
                            IsActive = true,
                            MessageKey = "hero_linkaro_region_oceanica_message",
                            RegionId = "oceanica",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8100)
                        },
                        new
                        {
                            Id = new Guid("2f52bb8a-1199-44ee-a061-8e9637f997dd"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/linkaro/hero_linkaro_region_sylvaria_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8103),
                            HeroId = "linkaro",
                            IsActive = true,
                            MessageKey = "hero_linkaro_region_sylvaria_message",
                            RegionId = "sylvaria",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8103)
                        },
                        new
                        {
                            Id = new Guid("8ad0db09-aedd-41ab-b7a3-46b7a4c60b5f"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/linkaro/hero_linkaro_region_crystalia_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8109),
                            HeroId = "linkaro",
                            IsActive = true,
                            MessageKey = "hero_linkaro_region_crystalia_message",
                            RegionId = "crystalia",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8109)
                        },
                        new
                        {
                            Id = new Guid("c05e4036-4e43-4fee-b0bf-000f5cf53676"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/linkaro/hero_linkaro_region_zephyra_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8112),
                            HeroId = "linkaro",
                            IsActive = true,
                            MessageKey = "hero_linkaro_region_zephyra_message",
                            RegionId = "zephyra",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8112)
                        },
                        new
                        {
                            Id = new Guid("4bb12f44-5084-4890-ba4d-042f4d373abb"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/linkaro/hero_linkaro_region_pyron_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8115),
                            HeroId = "linkaro",
                            IsActive = true,
                            MessageKey = "hero_linkaro_region_pyron_message",
                            RegionId = "pyron",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8116)
                        },
                        new
                        {
                            Id = new Guid("bd813485-06a8-4390-8b9c-f3fecb0f9501"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/linkaro/hero_linkaro_region_neptunia_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8119),
                            HeroId = "linkaro",
                            IsActive = true,
                            MessageKey = "hero_linkaro_region_neptunia_message",
                            RegionId = "neptunia",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8120)
                        },
                        new
                        {
                            Id = new Guid("0da59f33-1044-4d9a-b008-6fb0966f70ba"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/linkaro/hero_linkaro_region_aetherion_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8122),
                            HeroId = "linkaro",
                            IsActive = true,
                            MessageKey = "hero_linkaro_region_aetherion_message",
                            RegionId = "aetherion",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8123)
                        },
                        new
                        {
                            Id = new Guid("d5433644-488d-4af3-b3f1-d627b4a09189"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/linkaro/hero_linkaro_region_kelo_ketis_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8129),
                            HeroId = "linkaro",
                            IsActive = true,
                            MessageKey = "hero_linkaro_region_kelo_ketis_message",
                            RegionId = "kelo-ketis",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8129)
                        },
                        new
                        {
                            Id = new Guid("f5d65424-7d49-4e5b-9b57-2e48e0cab508"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/grubot/hero_grubot_region_gateway_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8133),
                            HeroId = "grubot",
                            IsActive = true,
                            MessageKey = "hero_grubot_region_gateway_message",
                            RegionId = "gateway",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8134)
                        },
                        new
                        {
                            Id = new Guid("c74c3e4b-7989-4edc-b8c5-10e6b0bb1893"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/grubot/hero_grubot_region_terra_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8137),
                            HeroId = "grubot",
                            IsActive = true,
                            MessageKey = "hero_grubot_region_terra_message",
                            RegionId = "terra",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8137)
                        },
                        new
                        {
                            Id = new Guid("c9bbb12e-e48d-4821-be82-6e7f99b6deb2"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/grubot/hero_grubot_region_lunaria_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8140),
                            HeroId = "grubot",
                            IsActive = true,
                            MessageKey = "hero_grubot_region_lunaria_message",
                            RegionId = "lunaria",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8140)
                        },
                        new
                        {
                            Id = new Guid("dec74d63-2f0b-4c43-a7a0-c6519aff9252"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/grubot/hero_grubot_region_mechanika_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8143),
                            HeroId = "grubot",
                            IsActive = true,
                            MessageKey = "hero_grubot_region_mechanika_message",
                            RegionId = "mechanika",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8144)
                        },
                        new
                        {
                            Id = new Guid("0b9eeae7-d68d-4cfc-8282-e4bce5f44586"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/grubot/hero_grubot_region_oceanica_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8147),
                            HeroId = "grubot",
                            IsActive = true,
                            MessageKey = "hero_grubot_region_oceanica_message",
                            RegionId = "oceanica",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8147)
                        },
                        new
                        {
                            Id = new Guid("818d5f28-cf66-4895-887c-382c27c5c075"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/grubot/hero_grubot_region_sylvaria_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8151),
                            HeroId = "grubot",
                            IsActive = true,
                            MessageKey = "hero_grubot_region_sylvaria_message",
                            RegionId = "sylvaria",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8151)
                        },
                        new
                        {
                            Id = new Guid("a51880a6-9878-4445-8034-e21961a7e086"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/grubot/hero_grubot_region_crystalia_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8154),
                            HeroId = "grubot",
                            IsActive = true,
                            MessageKey = "hero_grubot_region_crystalia_message",
                            RegionId = "crystalia",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8154)
                        },
                        new
                        {
                            Id = new Guid("8e6be4b5-59d0-40af-b5b2-df6f587cfa19"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/grubot/hero_grubot_region_zephyra_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8160),
                            HeroId = "grubot",
                            IsActive = true,
                            MessageKey = "hero_grubot_region_zephyra_message",
                            RegionId = "zephyra",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8161)
                        },
                        new
                        {
                            Id = new Guid("9c9ac106-3f55-4fe7-84c4-9e44ae5a3404"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/grubot/hero_grubot_region_pyron_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8164),
                            HeroId = "grubot",
                            IsActive = true,
                            MessageKey = "hero_grubot_region_pyron_message",
                            RegionId = "pyron",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8164)
                        },
                        new
                        {
                            Id = new Guid("4a0fd75b-8114-42f6-bbaa-a4d825351a99"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/grubot/hero_grubot_region_neptunia_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8167),
                            HeroId = "grubot",
                            IsActive = true,
                            MessageKey = "hero_grubot_region_neptunia_message",
                            RegionId = "neptunia",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8168)
                        },
                        new
                        {
                            Id = new Guid("650df3c1-f51d-4198-b857-e9397f0b0d91"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/grubot/hero_grubot_region_aetherion_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8172),
                            HeroId = "grubot",
                            IsActive = true,
                            MessageKey = "hero_grubot_region_aetherion_message",
                            RegionId = "aetherion",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8172)
                        },
                        new
                        {
                            Id = new Guid("1415ef83-afc6-4730-887b-4563908c4ff6"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/grubot/hero_grubot_region_kelo_ketis_message.wav",
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8175),
                            HeroId = "grubot",
                            IsActive = true,
                            MessageKey = "hero_grubot_region_kelo_ketis_message",
                            RegionId = "kelo-ketis",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 663, DateTimeKind.Utc).AddTicks(8175)
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.HeroProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("HeroId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HeroType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceStoryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UnlockedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "HeroId", "HeroType")
                        .IsUnique();

                    b.ToTable("HeroProgress");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            HeroId = "seed",
                            HeroType = "HERO_TREE_TRANSFORMATION",
                            SourceStoryId = "",
                            UnlockedAt = new DateTime(2025, 10, 31, 19, 17, 29, 678, DateTimeKind.Utc).AddTicks(1641),
                            UserId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            HeroId = "seed",
                            HeroType = "HERO_TREE_TRANSFORMATION",
                            SourceStoryId = "",
                            UnlockedAt = new DateTime(2025, 10, 31, 19, 17, 29, 678, DateTimeKind.Utc).AddTicks(1645),
                            UserId = new Guid("22222222-2222-2222-2222-222222222222")
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.HeroTreeProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("NodeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TokensCostCourage")
                        .HasColumnType("integer");

                    b.Property<int>("TokensCostCreativity")
                        .HasColumnType("integer");

                    b.Property<int>("TokensCostCuriosity")
                        .HasColumnType("integer");

                    b.Property<int>("TokensCostSafety")
                        .HasColumnType("integer");

                    b.Property<int>("TokensCostThinking")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UnlockedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "NodeId")
                        .IsUnique();

                    b.ToTable("HeroTreeProgress");
                });

            modelBuilder.Entity("XooCreator.BA.Data.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<string>("PayloadJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ResultUrl")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasMaxLength(24)
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasMaxLength(24)
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("XooCreator.BA.Data.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000001"),
                            Name = "Sahara"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000002"),
                            Name = "Jungle"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000003"),
                            Name = "Farm"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000004"),
                            Name = "Savanna"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000005"),
                            Name = "Forest"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000006"),
                            Name = "Wetlands"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000007"),
                            Name = "Mountains"
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AnswerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Guid>("StoryTileId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TokensJson")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StoryTileId", "AnswerId")
                        .IsUnique();

                    b.ToTable("StoryAnswers");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryAnswerToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("StoryAnswerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("StoryAnswerId");

                    b.ToTable("StoryAnswerTokens");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryAnswerTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<Guid>("StoryAnswerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StoryAnswerId", "LanguageCode")
                        .IsUnique();

                    b.ToTable("StoryAnswerTranslations");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryDefinition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CoverImageUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("StoryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StoryTopic")
                        .HasColumnType("text");

                    b.Property<int>("StoryType")
                        .HasColumnType("integer");

                    b.Property<string>("Summary")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StoryId")
                        .IsUnique();

                    b.ToTable("StoryDefinitions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            CoverImageUrl = "images/tol/stories/pp-prietenul-pierdut/0.cover.png",
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 666, DateTimeKind.Utc).AddTicks(1415),
                            CreatedBy = new Guid("33333333-3333-3333-3333-333333333333"),
                            IsActive = true,
                            SortOrder = 1,
                            Status = 1,
                            StoryId = "learn-to-read-s1",
                            StoryTopic = "terra",
                            StoryType = 1,
                            Title = "Puf-Puf și prietenul pierdut",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 666, DateTimeKind.Utc).AddTicks(1416),
                            UpdatedBy = new Guid("33333333-3333-3333-3333-333333333333")
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryDefinitionTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<Guid>("StoryDefinitionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StoryDefinitionId", "LanguageCode")
                        .IsUnique();

                    b.ToTable("StoryDefinitionTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0a36df1a-131a-4ce9-b054-cfba3640fbb8"),
                            LanguageCode = "ro-ro",
                            StoryDefinitionId = new Guid("44444444-4444-4444-4444-444444444444"),
                            Title = "Puf-Puf și prietenul pierdut"
                        },
                        new
                        {
                            Id = new Guid("07fd0299-bae5-48df-8eb9-cd4335ffd317"),
                            LanguageCode = "en-us",
                            StoryDefinitionId = new Guid("44444444-4444-4444-4444-444444444444"),
                            Title = "Puf-Puf and the Lost Friend"
                        },
                        new
                        {
                            Id = new Guid("14a6512d-4b87-4d3e-bb5e-6dbce97a5c1d"),
                            LanguageCode = "hu-hu",
                            StoryDefinitionId = new Guid("44444444-4444-4444-4444-444444444444"),
                            Title = "Puf-Puf és az elveszett barát"
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryHero", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HeroId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("UnlockConditionJson")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("HeroId")
                        .IsUnique();

                    b.ToTable("StoryHeroes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000100"),
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 661, DateTimeKind.Utc).AddTicks(9189),
                            HeroId = "puf-puf",
                            ImageUrl = "images/tol/stories/intro-pufpuf/heroes/pufpufblink.gif",
                            IsActive = true,
                            UnlockConditionJson = "{\"Type\":\"story_completion\",\"RequiredStories\":[\"intro-pufpuf\"],\"MinProgress\":100}",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 661, DateTimeKind.Utc).AddTicks(9190)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111100"),
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 661, DateTimeKind.Utc).AddTicks(9255),
                            HeroId = "linkaro",
                            ImageUrl = "images/tol/stories/lunaria-s1/heroes/linkaro.png",
                            IsActive = true,
                            UnlockConditionJson = "{\"Type\":\"story_completion\",\"RequiredStories\":[\"lunaria-s1\"],\"MinProgress\":100}",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 661, DateTimeKind.Utc).AddTicks(9256)
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222200"),
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 661, DateTimeKind.Utc).AddTicks(9306),
                            HeroId = "grubot",
                            ImageUrl = "images/tol/stories/mechanika-s1/heroes/grubot.png",
                            IsActive = true,
                            UnlockConditionJson = "{\"Type\":\"story_completion\",\"RequiredStories\":[\"mechanika-s1\"],\"MinProgress\":100}",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 661, DateTimeKind.Utc).AddTicks(9307)
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryHeroUnlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("StoryHeroId")
                        .HasColumnType("uuid");

                    b.Property<string>("StoryId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("UnlockOrder")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StoryHeroId", "StoryId")
                        .IsUnique();

                    b.ToTable("StoryHeroUnlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e2995bf7-2df9-432b-9934-aa41379df2bb"),
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 662, DateTimeKind.Utc).AddTicks(4617),
                            StoryHeroId = new Guid("00000000-0000-0000-0000-000000000100"),
                            StoryId = "intro-pufpuf",
                            UnlockOrder = 1
                        },
                        new
                        {
                            Id = new Guid("c8bc8861-43bb-45a6-bb93-45116700df7d"),
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 662, DateTimeKind.Utc).AddTicks(4878),
                            StoryHeroId = new Guid("11111111-1111-1111-1111-111111111100"),
                            StoryId = "lunaria-s1",
                            UnlockOrder = 1
                        },
                        new
                        {
                            Id = new Guid("a4fc1247-dfc3-4510-974f-01056f3fd867"),
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 662, DateTimeKind.Utc).AddTicks(4946),
                            StoryHeroId = new Guid("22222222-2222-2222-2222-222222222200"),
                            StoryId = "mechanika-s1",
                            UnlockOrder = 1
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryMarketplaceInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AgeRating")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Characters")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("EstimatedReadingTime")
                        .HasColumnType("integer");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNew")
                        .HasColumnType("boolean");

                    b.Property<int>("PriceInCredits")
                        .HasColumnType("integer");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("StoryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("StoryId")
                        .IsUnique();

                    b.ToTable("StoryMarketplaceInfos");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SelectedAnswer")
                        .HasColumnType("text");

                    b.Property<string>("StoryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TokensJson")
                        .HasColumnType("text");

                    b.Property<string>("TreeConfigurationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TreeConfigurationId");

                    b.HasIndex("UserId", "StoryId", "TreeConfigurationId")
                        .IsUnique();

                    b.ToTable("StoryProgress");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryPurchase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CreditsSpent")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PurchasedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("StoryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StoryId");

                    b.HasIndex("UserId", "StoryId")
                        .IsUnique();

                    b.ToTable("StoryPurchases");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryTile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AudioUrl")
                        .HasColumnType("text");

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Question")
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Guid>("StoryDefinitionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<string>("TileId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("StoryDefinitionId", "TileId")
                        .IsUnique();

                    b.ToTable("StoryTiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8a75b5a4-a7d8-42a8-870a-4b02c43019a8"),
                            Caption = "Puf-Puf pleacă",
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 666, DateTimeKind.Utc).AddTicks(1509),
                            ImageUrl = "images/tol/stories/pp-prietenul-pierdut/1.pleaca.png",
                            SortOrder = 1,
                            StoryDefinitionId = new Guid("44444444-4444-4444-4444-444444444444"),
                            Text = "Puf-Puf e un pisoi mic și pufos. Plouă peste pădure. Poartă o pelerină portocalie. „Ce plăcut e parfumul ploii!”, spune Puf-Puf.",
                            TileId = "1",
                            Type = "page",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 666, DateTimeKind.Utc).AddTicks(1510)
                        },
                        new
                        {
                            Id = new Guid("306d24fe-e735-4e1c-9516-983ddb5ece26"),
                            Caption = "Un plânset mic",
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 666, DateTimeKind.Utc).AddTicks(1738),
                            ImageUrl = "images/tol/stories/pp-prietenul-pierdut/2.planset.png",
                            SortOrder = 2,
                            StoryDefinitionId = new Guid("44444444-4444-4444-4444-444444444444"),
                            Text = "Se aude: „Pfff… pfff…”. Puf-Puf se oprește. „Cine plânge?” Din tufiș apare un iepuraș mic.",
                            TileId = "2",
                            Type = "page",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 666, DateTimeKind.Utc).AddTicks(1739)
                        },
                        new
                        {
                            Id = new Guid("b38de1d9-3e4b-4b02-8098-212cc9827f2c"),
                            Caption = "Prietenul pierdut",
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 666, DateTimeKind.Utc).AddTicks(1758),
                            ImageUrl = "images/tol/stories/pp-prietenul-pierdut/3.pierdut.png",
                            SortOrder = 3,
                            StoryDefinitionId = new Guid("44444444-4444-4444-4444-444444444444"),
                            Text = "„M-am pierdut”, spune iepurașul. „Nu plânge”, spune Puf-Puf. „Te voi duce pe potecă spre casă!”",
                            TileId = "3",
                            Type = "page",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 666, DateTimeKind.Utc).AddTicks(1758)
                        },
                        new
                        {
                            Id = new Guid("9aca4266-daa9-494f-913b-6edb6eae6f24"),
                            Caption = "Prin ploaie și pădure",
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 666, DateTimeKind.Utc).AddTicks(1763),
                            ImageUrl = "images/tol/stories/pp-prietenul_pierdut/4.ploaie-padure.png",
                            SortOrder = 4,
                            StoryDefinitionId = new Guid("44444444-4444-4444-4444-444444444444"),
                            Text = "Merg împreună prin pădure. Ploaia picură pe pietre. Puf-Puf ține umbrela. Iepurașul sare prin bălți: „Plip-plop!”",
                            TileId = "4",
                            Type = "page",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 666, DateTimeKind.Utc).AddTicks(1764)
                        },
                        new
                        {
                            Id = new Guid("023157ef-54fe-4e89-b4ee-4ae01e5a98b3"),
                            Caption = "Poiana cu pană",
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 666, DateTimeKind.Utc).AddTicks(1768),
                            ImageUrl = "images/tol/stories/pp-prietenul-pierdut/5.poiana.png",
                            SortOrder = 5,
                            StoryDefinitionId = new Guid("44444444-4444-4444-4444-444444444444"),
                            Text = "Ajung într-o poiană plină de flori. Pe jos e o pană strălucitoare. „Poiana asta e aproape!”, spune iepurașul. Zâmbește cu putere.",
                            TileId = "5",
                            Type = "page",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 666, DateTimeKind.Utc).AddTicks(1769)
                        },
                        new
                        {
                            Id = new Guid("744c1bf9-fada-4573-8caa-4d63dabcb071"),
                            Caption = "Povestea prieteniei",
                            CreatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 666, DateTimeKind.Utc).AddTicks(1782),
                            ImageUrl = "images/tol/stories/pp-prietenul-pierdut/6.final.png",
                            SortOrder = 6,
                            StoryDefinitionId = new Guid("44444444-4444-4444-4444-444444444444"),
                            Text = "„Mulțumesc, Puf-Puf!” „Prietenii se ajută!”, spune pisoiul. Ploaia se oprește. Pe cer, un curcubeu. P ca Puf-Puf, P ca prieten!",
                            TileId = "6",
                            Type = "page",
                            UpdatedAt = new DateTime(2025, 10, 31, 19, 17, 29, 666, DateTimeKind.Utc).AddTicks(1782)
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryTileTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Question")
                        .HasColumnType("text");

                    b.Property<Guid>("StoryTileId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StoryTileId", "LanguageCode")
                        .IsUnique();

                    b.ToTable("StoryTileTranslations");
                });

            modelBuilder.Entity("XooCreator.BA.Data.Tree", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CurrentTier")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("RootType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Trees");
                });

            modelBuilder.Entity("XooCreator.BA.Data.TreeChoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BranchType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Tier")
                        .HasColumnType("integer");

                    b.Property<string>("TraitAwarded")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TreeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TreeId", "Tier")
                        .IsUnique();

                    b.ToTable("TreeChoices");
                });

            modelBuilder.Entity("XooCreator.BA.Data.TreeConfiguration", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TreeConfigurations");
                });

            modelBuilder.Entity("XooCreator.BA.Data.TreeProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsUnlocked")
                        .HasColumnType("boolean");

                    b.Property<string>("RegionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TreeConfigurationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UnlockedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TreeConfigurationId");

                    b.HasIndex("UserId", "RegionId", "TreeConfigurationId")
                        .IsUnique();

                    b.ToTable("TreeProgress");
                });

            modelBuilder.Entity("XooCreator.BA.Data.TreeRegion", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PufpufMessage")
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("TreeConfigurationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TreeConfigurationId");

                    b.HasIndex("Id", "TreeConfigurationId")
                        .IsUnique();

                    b.ToTable("TreeRegions");
                });

            modelBuilder.Entity("XooCreator.BA.Data.TreeStoryNode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RegionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RewardImageUrl")
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("StoryId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TreeConfigurationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.HasIndex("TreeConfigurationId");

                    b.HasIndex("StoryId", "RegionId", "TreeConfigurationId")
                        .IsUnique();

                    b.ToTable("TreeStoryNodes");
                });

            modelBuilder.Entity("XooCreator.BA.Data.TreeUnlockRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FromId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("MinCount")
                        .HasColumnType("integer");

                    b.Property<string>("RequiredStoriesCsv")
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("StoryId")
                        .HasColumnType("text");

                    b.Property<string>("ToRegionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TreeConfigurationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TreeConfigurationId");

                    b.ToTable("TreeUnlockRules");
                });

            modelBuilder.Entity("XooCreator.BA.Data.UserBestiary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BestiaryItemId")
                        .HasColumnType("uuid");

                    b.Property<string>("BestiaryType")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("DiscoveredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BestiaryItemId");

                    b.HasIndex("UserId", "BestiaryItemId", "BestiaryType")
                        .IsUnique();

                    b.ToTable("UserBestiary", (string)null);
                });

            modelBuilder.Entity("XooCreator.BA.Data.UserCreatedStories", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreationNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("StoryDefinitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StoryDefinitionId");

                    b.HasIndex("UserId", "StoryDefinitionId")
                        .IsUnique();

                    b.ToTable("UserCreatedStories");
                });

            modelBuilder.Entity("XooCreator.BA.Data.UserOwnedStories", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("PurchaseReference")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("PurchasedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("StoryDefinitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StoryDefinitionId");

                    b.HasIndex("UserId", "StoryDefinitionId")
                        .IsUnique();

                    b.ToTable("UserOwnedStories");
                });

            modelBuilder.Entity("XooCreator.BA.Data.UserStoryReadProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ReadAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("StoryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TileId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "StoryId", "TileId")
                        .IsUnique();

                    b.ToTable("UserStoryReadProgress");
                });

            modelBuilder.Entity("XooCreator.BA.Data.UserTokenBalance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Type", "Value")
                        .IsUnique();

                    b.ToTable("UserTokenBalances");
                });

            modelBuilder.Entity("XooCreator.BA.Data.Animal", b =>
                {
                    b.HasOne("XooCreator.BA.Data.Region", "Region")
                        .WithMany("Animals")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("XooCreator.BA.Data.AnimalPartSupport", b =>
                {
                    b.HasOne("XooCreator.BA.Data.Animal", "Animal")
                        .WithMany("SupportedParts")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XooCreator.BA.Data.BodyPart", "Part")
                        .WithMany()
                        .HasForeignKey("PartKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("XooCreator.BA.Data.AnimalTranslation", b =>
                {
                    b.HasOne("XooCreator.BA.Data.Animal", "Animal")
                        .WithMany("Translations")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");
                });

            modelBuilder.Entity("XooCreator.BA.Data.BodyPartTranslation", b =>
                {
                    b.HasOne("XooCreator.BA.Data.BodyPart", "BodyPart")
                        .WithMany("Translations")
                        .HasForeignKey("BodyPartKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BodyPart");
                });

            modelBuilder.Entity("XooCreator.BA.Data.Creature", b =>
                {
                    b.HasOne("XooCreator.BA.Data.Tree", "Tree")
                        .WithMany()
                        .HasForeignKey("TreeId");

                    b.HasOne("XooCreator.BA.Data.AlchimaliaUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tree");

                    b.Navigation("User");
                });

            modelBuilder.Entity("XooCreator.BA.Data.CreditTransaction", b =>
                {
                    b.HasOne("XooCreator.BA.Data.AlchimaliaUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("XooCreator.BA.Data.CreditWallet", b =>
                {
                    b.HasOne("XooCreator.BA.Data.AlchimaliaUser", "User")
                        .WithOne()
                        .HasForeignKey("XooCreator.BA.Data.CreditWallet", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("XooCreator.BA.Data.HeroDefinitionTranslation", b =>
                {
                    b.HasOne("XooCreator.BA.Data.HeroDefinition", "HeroDefinition")
                        .WithMany("Translations")
                        .HasForeignKey("HeroDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HeroDefinition");
                });

            modelBuilder.Entity("XooCreator.BA.Data.HeroProgress", b =>
                {
                    b.HasOne("XooCreator.BA.Data.AlchimaliaUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("XooCreator.BA.Data.HeroTreeProgress", b =>
                {
                    b.HasOne("XooCreator.BA.Data.AlchimaliaUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("XooCreator.BA.Data.Job", b =>
                {
                    b.HasOne("XooCreator.BA.Data.AlchimaliaUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryAnswer", b =>
                {
                    b.HasOne("XooCreator.BA.Data.StoryTile", "StoryTile")
                        .WithMany("Answers")
                        .HasForeignKey("StoryTileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoryTile");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryAnswerToken", b =>
                {
                    b.HasOne("XooCreator.BA.Data.StoryAnswer", "StoryAnswer")
                        .WithMany("Tokens")
                        .HasForeignKey("StoryAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoryAnswer");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryAnswerTranslation", b =>
                {
                    b.HasOne("XooCreator.BA.Data.StoryAnswer", "StoryAnswer")
                        .WithMany("Translations")
                        .HasForeignKey("StoryAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoryAnswer");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryDefinitionTranslation", b =>
                {
                    b.HasOne("XooCreator.BA.Data.StoryDefinition", "StoryDefinition")
                        .WithMany("Translations")
                        .HasForeignKey("StoryDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoryDefinition");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryHeroUnlock", b =>
                {
                    b.HasOne("XooCreator.BA.Data.StoryHero", "StoryHero")
                        .WithMany("StoryUnlocks")
                        .HasForeignKey("StoryHeroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoryHero");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryMarketplaceInfo", b =>
                {
                    b.HasOne("XooCreator.BA.Data.StoryDefinition", "Story")
                        .WithMany()
                        .HasForeignKey("StoryId")
                        .HasPrincipalKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Story");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryProgress", b =>
                {
                    b.HasOne("XooCreator.BA.Data.TreeConfiguration", "TreeConfiguration")
                        .WithMany()
                        .HasForeignKey("TreeConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XooCreator.BA.Data.AlchimaliaUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TreeConfiguration");

                    b.Navigation("User");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryPurchase", b =>
                {
                    b.HasOne("XooCreator.BA.Data.StoryDefinition", "Story")
                        .WithMany()
                        .HasForeignKey("StoryId")
                        .HasPrincipalKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XooCreator.BA.Data.AlchimaliaUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Story");

                    b.Navigation("User");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryTile", b =>
                {
                    b.HasOne("XooCreator.BA.Data.StoryDefinition", "StoryDefinition")
                        .WithMany("Tiles")
                        .HasForeignKey("StoryDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoryDefinition");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryTileTranslation", b =>
                {
                    b.HasOne("XooCreator.BA.Data.StoryTile", "StoryTile")
                        .WithMany("Translations")
                        .HasForeignKey("StoryTileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoryTile");
                });

            modelBuilder.Entity("XooCreator.BA.Data.Tree", b =>
                {
                    b.HasOne("XooCreator.BA.Data.AlchimaliaUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("XooCreator.BA.Data.TreeChoice", b =>
                {
                    b.HasOne("XooCreator.BA.Data.Tree", "Tree")
                        .WithMany("Choices")
                        .HasForeignKey("TreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tree");
                });

            modelBuilder.Entity("XooCreator.BA.Data.TreeProgress", b =>
                {
                    b.HasOne("XooCreator.BA.Data.TreeConfiguration", "TreeConfiguration")
                        .WithMany()
                        .HasForeignKey("TreeConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XooCreator.BA.Data.AlchimaliaUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TreeConfiguration");

                    b.Navigation("User");
                });

            modelBuilder.Entity("XooCreator.BA.Data.TreeRegion", b =>
                {
                    b.HasOne("XooCreator.BA.Data.TreeConfiguration", "TreeConfiguration")
                        .WithMany()
                        .HasForeignKey("TreeConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TreeConfiguration");
                });

            modelBuilder.Entity("XooCreator.BA.Data.TreeStoryNode", b =>
                {
                    b.HasOne("XooCreator.BA.Data.TreeRegion", "Region")
                        .WithMany("Stories")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XooCreator.BA.Data.StoryDefinition", "StoryDefinition")
                        .WithMany()
                        .HasForeignKey("StoryId")
                        .HasPrincipalKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XooCreator.BA.Data.TreeConfiguration", "TreeConfiguration")
                        .WithMany()
                        .HasForeignKey("TreeConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");

                    b.Navigation("StoryDefinition");

                    b.Navigation("TreeConfiguration");
                });

            modelBuilder.Entity("XooCreator.BA.Data.TreeUnlockRule", b =>
                {
                    b.HasOne("XooCreator.BA.Data.TreeConfiguration", "TreeConfiguration")
                        .WithMany()
                        .HasForeignKey("TreeConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TreeConfiguration");
                });

            modelBuilder.Entity("XooCreator.BA.Data.UserBestiary", b =>
                {
                    b.HasOne("XooCreator.BA.Data.BestiaryItem", "BestiaryItem")
                        .WithMany()
                        .HasForeignKey("BestiaryItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XooCreator.BA.Data.AlchimaliaUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BestiaryItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("XooCreator.BA.Data.UserCreatedStories", b =>
                {
                    b.HasOne("XooCreator.BA.Data.StoryDefinition", "StoryDefinition")
                        .WithMany()
                        .HasForeignKey("StoryDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XooCreator.BA.Data.AlchimaliaUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoryDefinition");

                    b.Navigation("User");
                });

            modelBuilder.Entity("XooCreator.BA.Data.UserOwnedStories", b =>
                {
                    b.HasOne("XooCreator.BA.Data.StoryDefinition", "StoryDefinition")
                        .WithMany()
                        .HasForeignKey("StoryDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XooCreator.BA.Data.AlchimaliaUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoryDefinition");

                    b.Navigation("User");
                });

            modelBuilder.Entity("XooCreator.BA.Data.UserStoryReadProgress", b =>
                {
                    b.HasOne("XooCreator.BA.Data.AlchimaliaUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("XooCreator.BA.Data.UserTokenBalance", b =>
                {
                    b.HasOne("XooCreator.BA.Data.AlchimaliaUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("XooCreator.BA.Data.Animal", b =>
                {
                    b.Navigation("SupportedParts");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("XooCreator.BA.Data.BodyPart", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("XooCreator.BA.Data.HeroDefinition", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("XooCreator.BA.Data.Region", b =>
                {
                    b.Navigation("Animals");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryAnswer", b =>
                {
                    b.Navigation("Tokens");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryDefinition", b =>
                {
                    b.Navigation("Tiles");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryHero", b =>
                {
                    b.Navigation("StoryUnlocks");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryTile", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("XooCreator.BA.Data.Tree", b =>
                {
                    b.Navigation("Choices");
                });

            modelBuilder.Entity("XooCreator.BA.Data.TreeRegion", b =>
                {
                    b.Navigation("Stories");
                });
#pragma warning restore 612, 618
        }
    }
}
