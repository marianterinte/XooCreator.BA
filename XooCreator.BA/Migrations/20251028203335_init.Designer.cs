// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using XooCreator.BA.Data;

#nullable disable

namespace XooCreator.BA.Migrations
{
    [DbContext(typeof(XooDbContext))]
    [Migration("20251028203335_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("XooCreator.BA.Data.AlchimaliaUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Auth0Id")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("HasVisitedImaginationLaboratory")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Picture")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Auth0Id")
                        .IsUnique();

                    b.ToTable("AlchimaliaUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Auth0Id = "test-user-sub",
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 269, DateTimeKind.Utc).AddTicks(7578),
                            Email = "test@example.com",
                            HasVisitedImaginationLaboratory = false,
                            LastLoginAt = new DateTime(2025, 10, 28, 20, 33, 35, 269, DateTimeKind.Utc).AddTicks(7578),
                            Name = "Test User",
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 269, DateTimeKind.Utc).AddTicks(7579)
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Auth0Id = "marian-test-sub",
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 269, DateTimeKind.Utc).AddTicks(7582),
                            Email = "marian@example.com",
                            HasVisitedImaginationLaboratory = false,
                            LastLoginAt = new DateTime(2025, 10, 28, 20, 33, 35, 269, DateTimeKind.Utc).AddTicks(7582),
                            Name = "Marian",
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 269, DateTimeKind.Utc).AddTicks(7583)
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Auth0Id = "alchimalia-admin-sub",
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 269, DateTimeKind.Utc).AddTicks(7585),
                            Email = "alchimalia@admin.com",
                            HasVisitedImaginationLaboratory = false,
                            LastLoginAt = new DateTime(2025, 10, 28, 20, 33, 35, 269, DateTimeKind.Utc).AddTicks(7585),
                            Name = "Alchimalia-Admin",
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 269, DateTimeKind.Utc).AddTicks(7585)
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.Animal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsHybrid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Src")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Animals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            IsHybrid = false,
                            Label = "Bunny",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000003"),
                            Src = "images/animals/base/bunny.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            IsHybrid = false,
                            Label = "Hippo",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000006"),
                            Src = "images/animals/base/hippo.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            IsHybrid = false,
                            Label = "Giraffe",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000004"),
                            Src = "images/animals/base/giraffe.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            IsHybrid = false,
                            Label = "Dog",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000003"),
                            Src = "images/animals/base/dog.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            IsHybrid = false,
                            Label = "Fox",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000005"),
                            Src = "images/animals/base/fox.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            IsHybrid = false,
                            Label = "Cat",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000003"),
                            Src = "images/animals/base/cat.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            IsHybrid = false,
                            Label = "Monkey",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000002"),
                            Src = "images/animals/base/monkey.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            IsHybrid = false,
                            Label = "Camel",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000001"),
                            Src = "images/animals/base/camel.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            IsHybrid = false,
                            Label = "Deer",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000005"),
                            Src = "images/animals/base/deer.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000a"),
                            IsHybrid = false,
                            Label = "Duck",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000006"),
                            Src = "images/animals/base/duck.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000b"),
                            IsHybrid = false,
                            Label = "Eagle",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000007"),
                            Src = "images/animals/base/eagle.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000c"),
                            IsHybrid = false,
                            Label = "Elephant",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000004"),
                            Src = "images/animals/base/elephant.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000d"),
                            IsHybrid = false,
                            Label = "Ostrich",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000004"),
                            Src = "images/animals/base/ostrich.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000e"),
                            IsHybrid = false,
                            Label = "Parrot",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000002"),
                            Src = "images/animals/base/parrot.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000f"),
                            IsHybrid = false,
                            Label = "Jaguar",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000002"),
                            Src = "images/animals/base/jaguar.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            IsHybrid = false,
                            Label = "Toucan",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000002"),
                            Src = "images/animals/base/toucan.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            IsHybrid = false,
                            Label = "Anaconda",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000002"),
                            Src = "images/animals/base/anaconda.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            IsHybrid = false,
                            Label = "Capuchin Monkey",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000002"),
                            Src = "images/animals/base/capuchin_monkey.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            IsHybrid = false,
                            Label = "Poison Dart Frog",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000002"),
                            Src = "images/animals/base/poison_dart_frog.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000014"),
                            IsHybrid = false,
                            Label = "Lion",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000004"),
                            Src = "images/animals/base/lion.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000015"),
                            IsHybrid = false,
                            Label = "African Elephant",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000004"),
                            Src = "images/animals/base/african_elephant.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000016"),
                            IsHybrid = false,
                            Label = "Giraffe",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000004"),
                            Src = "images/animals/base/giraffe.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000017"),
                            IsHybrid = false,
                            Label = "Zebra",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000004"),
                            Src = "images/animals/base/zebra.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000018"),
                            IsHybrid = false,
                            Label = "Rhinoceros",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000004"),
                            Src = "images/animals/base/rhinoceros.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000019"),
                            IsHybrid = false,
                            Label = "Bison",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000007"),
                            Src = "images/animals/base/bison.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000001a"),
                            IsHybrid = false,
                            Label = "Saiga Antelope",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000004"),
                            Src = "images/animals/base/saiga_antelope.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000001b"),
                            IsHybrid = false,
                            Label = "Gray Wolf",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000005"),
                            Src = "images/animals/base/gray_wolf.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000001c"),
                            IsHybrid = false,
                            Label = "Przewalski's Horse",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000007"),
                            Src = "images/animals/base/przewalski_horse.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000001d"),
                            IsHybrid = false,
                            Label = "Steppe Eagle",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000007"),
                            Src = "images/animals/base/steppe_eagle.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000001e"),
                            IsHybrid = false,
                            Label = "Cow",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000003"),
                            Src = "images/animals/base/cow.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000001f"),
                            IsHybrid = false,
                            Label = "Sheep",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000003"),
                            Src = "images/animals/base/sheep.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000020"),
                            IsHybrid = false,
                            Label = "Horse",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000003"),
                            Src = "images/animals/base/horse.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000021"),
                            IsHybrid = false,
                            Label = "Chicken",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000003"),
                            Src = "images/animals/base/chicken.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000022"),
                            IsHybrid = false,
                            Label = "Pig",
                            RegionId = new Guid("10000000-0000-0000-0000-000000000003"),
                            Src = "images/animals/base/pig.jpg"
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.AnimalPartSupport", b =>
                {
                    b.Property<Guid>("AnimalId")
                        .HasColumnType("uuid");

                    b.Property<string>("PartKey")
                        .HasColumnType("character varying(32)");

                    b.HasKey("AnimalId", "PartKey");

                    b.HasIndex("PartKey");

                    b.ToTable("AnimalPartSupports");

                    b.HasData(
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000001"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000001"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000001"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000002"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000002"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000002"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000003"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000003"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000003"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000003"),
                            PartKey = "legs"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000003"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000003"),
                            PartKey = "horn"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000003"),
                            PartKey = "horns"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000004"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000004"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000004"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000005"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000005"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000005"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000006"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000006"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000006"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000007"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000007"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000007"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000008"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000008"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000008"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000009"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000009"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000009"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000009"),
                            PartKey = "legs"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000009"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000009"),
                            PartKey = "horn"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000009"),
                            PartKey = "horns"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000a"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000a"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000a"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000a"),
                            PartKey = "legs"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000a"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000a"),
                            PartKey = "wings"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000b"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000b"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000b"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000b"),
                            PartKey = "legs"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000b"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000b"),
                            PartKey = "wings"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000c"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000c"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000c"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000d"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000d"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000d"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000d"),
                            PartKey = "legs"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000d"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000d"),
                            PartKey = "wings"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000e"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000e"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000e"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000e"),
                            PartKey = "legs"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000e"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000e"),
                            PartKey = "wings"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000f"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000f"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000f"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000010"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000010"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000010"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000010"),
                            PartKey = "legs"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000010"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000010"),
                            PartKey = "wings"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000011"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000011"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000011"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000012"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000012"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000012"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000013"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000013"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000013"),
                            PartKey = "legs"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000013"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000014"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000014"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000014"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000015"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000015"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000015"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000016"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000016"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000016"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000016"),
                            PartKey = "legs"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000016"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000017"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000017"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000017"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000017"),
                            PartKey = "legs"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000017"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000018"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000018"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000018"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000018"),
                            PartKey = "legs"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000018"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000018"),
                            PartKey = "horn"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000019"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000019"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000019"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001a"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001a"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001a"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001a"),
                            PartKey = "legs"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001a"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001a"),
                            PartKey = "horns"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001b"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001b"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001b"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001c"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001c"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001c"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001c"),
                            PartKey = "legs"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001c"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001d"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001d"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001d"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001d"),
                            PartKey = "legs"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001d"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001d"),
                            PartKey = "wings"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001e"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001e"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001e"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001f"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001f"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001f"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000020"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000020"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000020"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000020"),
                            PartKey = "legs"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000020"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000021"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000021"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000021"),
                            PartKey = "arms"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000021"),
                            PartKey = "legs"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000021"),
                            PartKey = "tail"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000021"),
                            PartKey = "wings"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000022"),
                            PartKey = "head"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000022"),
                            PartKey = "body"
                        },
                        new
                        {
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000022"),
                            PartKey = "arms"
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.AnimalTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AnimalId")
                        .HasColumnType("uuid");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId", "LanguageCode")
                        .IsUnique();

                    b.ToTable("AnimalTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1b4aa4f1-33b2-4ce5-a674-9239a55e04ec"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Label = "Bunny",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("d62c1ad8-be15-4e19-b213-dc2e1a95b5dd"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Label = "Hippo",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("65b6756b-6101-4b22-94ef-f6d1bae6ed2e"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000003"),
                            Label = "Giraffe",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("9dc8b002-9d23-4b92-95f4-63eb4e6000f0"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000004"),
                            Label = "Dog",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("8a2ba7ce-fe9e-406c-9623-f6532539970c"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000005"),
                            Label = "Fox",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("859a2167-8eee-4f4e-8479-c25fdcae1615"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000006"),
                            Label = "Cat",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("981645e4-66a3-453e-82ce-a8171daf47c4"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000007"),
                            Label = "Monkey",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("1fad1495-3bb1-482a-b574-8d4fbf76682c"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000008"),
                            Label = "Camel",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("4e51fd1e-1f8c-435a-8ec6-d7bd2d5e827e"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000009"),
                            Label = "Deer",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("c795a199-a8a1-4375-a871-43d885ed9cd6"),
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000a"),
                            Label = "Duck",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("fd388c52-618d-4df9-b10f-08b288080591"),
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000b"),
                            Label = "Eagle",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("39cb72a7-b5a9-4184-83cc-aae87d2a0c94"),
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000c"),
                            Label = "Elephant",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("a0a6be5c-b156-4756-b876-b657a317e8e4"),
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000d"),
                            Label = "Ostrich",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("aef8b654-8d8b-4bba-88a0-fc7d04a0e14d"),
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000e"),
                            Label = "Parrot",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("03d98516-ab68-4df9-add0-4995950c2f9e"),
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000000f"),
                            Label = "Jaguar",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("f9483712-79fe-4c64-90e0-02d641d2bca1"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000010"),
                            Label = "Toucan",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("96afc08f-531c-47e8-a51a-5efcfc379166"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000011"),
                            Label = "Anaconda",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("546aa833-7ecb-40fb-b4c0-7d96f9dd9bb0"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000012"),
                            Label = "Capuchin Monkey",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("167fbd79-3fbd-475a-afcf-9496693d4247"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000013"),
                            Label = "Poison Dart Frog",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("1b9dc3ae-8010-43fa-8935-44b6f04099c8"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000014"),
                            Label = "Lion",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("3baefaf4-e3a8-4dfd-9260-0d77ff359e17"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000015"),
                            Label = "African Elephant",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("683a1417-8e3c-4fe0-a2d0-202be3e40358"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000016"),
                            Label = "Giraffe",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("6b53d464-75eb-4603-96a1-42b7fd8e39b3"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000017"),
                            Label = "Zebra",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("e6a2a524-b8e5-4065-ae61-a2ade60c33ef"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000018"),
                            Label = "Rhinoceros",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("24472ef2-140f-4fab-a775-a7cd29373168"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000019"),
                            Label = "Bison",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("21c449ad-da70-4f84-a49a-c0f5bca1145c"),
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001a"),
                            Label = "Saiga Antelope",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("c3d11c75-56af-45c8-bfd1-0ead70b33645"),
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001b"),
                            Label = "Gray Wolf",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("a6cee813-2f1a-4b01-94a2-595ab91e0da9"),
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001c"),
                            Label = "Przewalski's Horse",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("31b114e4-c7e0-4290-8342-d36590d988e9"),
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001d"),
                            Label = "Steppe Eagle",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("a3870eab-f382-4286-8936-c76db8f3c403"),
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001e"),
                            Label = "Cow",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("346e7c7f-eb35-44f1-994c-4267ce72b4e5"),
                            AnimalId = new Guid("00000000-0000-0000-0000-00000000001f"),
                            Label = "Sheep",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("214314d0-6004-4d04-9d8f-72bca3ce843f"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000020"),
                            Label = "Horse",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("d57863aa-b113-48a7-8bf7-7bb41f628de6"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000021"),
                            Label = "Chicken",
                            LanguageCode = "en-us"
                        },
                        new
                        {
                            Id = new Guid("14319b97-9be8-47b6-92ad-a9179af0b0da"),
                            AnimalId = new Guid("00000000-0000-0000-0000-000000000022"),
                            Label = "Pig",
                            LanguageCode = "en-us"
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.BestiaryItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ArmsKey")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("BodyKey")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HeadKey")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Story")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.HasKey("Id");

                    b.ToTable("BestiaryItems");
                });

            modelBuilder.Entity("XooCreator.BA.Data.BodyPart", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("IsBaseLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Key");

                    b.ToTable("BodyParts");

                    b.HasData(
                        new
                        {
                            Key = "head",
                            Image = "images/bodyparts/face.webp",
                            IsBaseLocked = false,
                            Name = "Head"
                        },
                        new
                        {
                            Key = "body",
                            Image = "images/bodyparts/body.webp",
                            IsBaseLocked = false,
                            Name = "Body"
                        },
                        new
                        {
                            Key = "arms",
                            Image = "images/bodyparts/hands.webp",
                            IsBaseLocked = false,
                            Name = "Arms"
                        },
                        new
                        {
                            Key = "legs",
                            Image = "images/bodyparts/legs.webp",
                            IsBaseLocked = true,
                            Name = "Legs"
                        },
                        new
                        {
                            Key = "tail",
                            Image = "images/bodyparts/tail.webp",
                            IsBaseLocked = true,
                            Name = "Tail"
                        },
                        new
                        {
                            Key = "wings",
                            Image = "images/bodyparts/wings.webp",
                            IsBaseLocked = true,
                            Name = "Wings"
                        },
                        new
                        {
                            Key = "horn",
                            Image = "images/bodyparts/horn.webp",
                            IsBaseLocked = true,
                            Name = "Horn"
                        },
                        new
                        {
                            Key = "horns",
                            Image = "images/bodyparts/horns.webp",
                            IsBaseLocked = true,
                            Name = "Horns"
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.BodyPartTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BodyPartKey")
                        .IsRequired()
                        .HasColumnType("character varying(32)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BodyPartKey", "LanguageCode")
                        .IsUnique();

                    b.ToTable("BodyPartTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("de62b9ae-9a7c-4011-8030-f21459eb9fda"),
                            BodyPartKey = "head",
                            LanguageCode = "en-us",
                            Name = "Head"
                        },
                        new
                        {
                            Id = new Guid("a7f3829e-2712-4f5b-a8f6-bdfe0e31f2f7"),
                            BodyPartKey = "body",
                            LanguageCode = "en-us",
                            Name = "Body"
                        },
                        new
                        {
                            Id = new Guid("b7fae8e3-20e1-441f-a5f9-0571b78c9084"),
                            BodyPartKey = "arms",
                            LanguageCode = "en-us",
                            Name = "Arms"
                        },
                        new
                        {
                            Id = new Guid("42d46181-0d1b-4cd1-84c8-4225dc5016a7"),
                            BodyPartKey = "legs",
                            LanguageCode = "en-us",
                            Name = "Legs"
                        },
                        new
                        {
                            Id = new Guid("2ddb4988-4a06-4370-9894-9a447b621eb2"),
                            BodyPartKey = "tail",
                            LanguageCode = "en-us",
                            Name = "Tail"
                        },
                        new
                        {
                            Id = new Guid("f1dd33bc-d4c6-4f03-9e01-205e45b0f4a5"),
                            BodyPartKey = "wings",
                            LanguageCode = "en-us",
                            Name = "Wings"
                        },
                        new
                        {
                            Id = new Guid("3f66073d-2e55-4b5c-9c2c-1cef950393ef"),
                            BodyPartKey = "horn",
                            LanguageCode = "en-us",
                            Name = "Horn"
                        },
                        new
                        {
                            Id = new Guid("c36761b9-da3a-4578-99a9-234a06d58258"),
                            BodyPartKey = "horns",
                            LanguageCode = "en-us",
                            Name = "Horns"
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.BuilderConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BaseUnlockedAnimalIds")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BaseUnlockedBodyPartKeys")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BuilderConfigs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BaseUnlockedAnimalIds = "[\"00000000-0000-0000-0000-000000000001\",\"00000000-0000-0000-0000-000000000002\",\"00000000-0000-0000-0000-000000000003\"]",
                            BaseUnlockedBodyPartKeys = "[\"head\",\"body\",\"arms\"]"
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.Creature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Archetype")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PromptUsedJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Rarity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Story")
                        .HasColumnType("text");

                    b.Property<string>("ThumbUrl")
                        .HasColumnType("text");

                    b.Property<string>("TraitsJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TreeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TreeId");

                    b.HasIndex("UserId");

                    b.ToTable("Creatures");
                });

            modelBuilder.Entity("XooCreator.BA.Data.CreditTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Reference")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CreditTransactions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Amount = 15,
                            CreatedAt = new DateTime(2025, 10, 27, 20, 33, 35, 269, DateTimeKind.Utc).AddTicks(7721),
                            Reference = "test-purchase-marian",
                            Type = 0,
                            UserId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            Amount = -5,
                            CreatedAt = new DateTime(2025, 10, 28, 18, 33, 35, 269, DateTimeKind.Utc).AddTicks(7731),
                            Reference = "test-generation",
                            Type = 1,
                            UserId = new Guid("22222222-2222-2222-2222-222222222222")
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.CreditWallet", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Balance")
                        .HasColumnType("integer");

                    b.Property<int>("DiscoveryBalance")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId");

                    b.ToTable("CreditWallets");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Balance = 5,
                            DiscoveryBalance = 0,
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 269, DateTimeKind.Utc).AddTicks(7672)
                        },
                        new
                        {
                            UserId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Balance = 5,
                            DiscoveryBalance = 0,
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 269, DateTimeKind.Utc).AddTicks(7673)
                        },
                        new
                        {
                            UserId = new Guid("33333333-3333-3333-3333-333333333333"),
                            Balance = 1000,
                            DiscoveryBalance = 0,
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 269, DateTimeKind.Utc).AddTicks(7674)
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.HeroClickMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AudioUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HeroId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("MessageKey")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("HeroId")
                        .IsUnique();

                    b.ToTable("HeroClickMessages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a20dd5eb-d77b-4ef5-b01d-0909ecf9b1d6"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/puf-puf/hero_puf-puf_click_message.wav",
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 265, DateTimeKind.Utc).AddTicks(2691),
                            HeroId = "puf-puf",
                            IsActive = true,
                            MessageKey = "hero_puf-puf_click_message",
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 265, DateTimeKind.Utc).AddTicks(2692)
                        },
                        new
                        {
                            Id = new Guid("e01d0503-596e-42f2-95d2-bacaf8367cd7"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/linkaro/hero_linkaro_click_message.wav",
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 265, DateTimeKind.Utc).AddTicks(2701),
                            HeroId = "linkaro",
                            IsActive = true,
                            MessageKey = "hero_linkaro_click_message",
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 265, DateTimeKind.Utc).AddTicks(2701)
                        },
                        new
                        {
                            Id = new Guid("4ce73125-dfe7-444a-8098-113ff4480fd2"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/grubot/hero_grubot_click_message.wav",
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 265, DateTimeKind.Utc).AddTicks(2703),
                            HeroId = "grubot",
                            IsActive = true,
                            MessageKey = "hero_grubot_click_message",
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 265, DateTimeKind.Utc).AddTicks(2703)
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.HeroDefinition", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("CourageCost")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreativityCost")
                        .HasColumnType("integer");

                    b.Property<int>("CuriosityCost")
                        .HasColumnType("integer");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsUnlocked")
                        .HasColumnType("boolean");

                    b.Property<double>("PositionX")
                        .HasColumnType("decimal(10,6)");

                    b.Property<double>("PositionY")
                        .HasColumnType("decimal(10,6)");

                    b.Property<string>("PrerequisitesJson")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("RewardsJson")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("SafetyCost")
                        .HasColumnType("integer");

                    b.Property<int>("ThinkingCost")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("HeroDefinitions");

                    b.HasData(
                        new
                        {
                            Id = "puf-puf",
                            CourageCost = 0,
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 265, DateTimeKind.Utc).AddTicks(2879),
                            CreativityCost = 0,
                            CuriosityCost = 0,
                            Image = "images/heroes/pufpufblink.gif",
                            IsUnlocked = false,
                            PositionX = 0.0,
                            PositionY = 0.0,
                            PrerequisitesJson = "[]",
                            RewardsJson = "[]",
                            SafetyCost = 0,
                            ThinkingCost = 0,
                            Type = "STORY_HERO",
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 265, DateTimeKind.Utc).AddTicks(2880)
                        },
                        new
                        {
                            Id = "linkaro",
                            CourageCost = 0,
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 265, DateTimeKind.Utc).AddTicks(2887),
                            CreativityCost = 0,
                            CuriosityCost = 0,
                            Image = "images/heroes/linkaro.png",
                            IsUnlocked = false,
                            PositionX = 0.0,
                            PositionY = 0.0,
                            PrerequisitesJson = "[]",
                            RewardsJson = "[]",
                            SafetyCost = 0,
                            ThinkingCost = 0,
                            Type = "STORY_HERO",
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 265, DateTimeKind.Utc).AddTicks(2887)
                        },
                        new
                        {
                            Id = "grubot",
                            CourageCost = 0,
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 265, DateTimeKind.Utc).AddTicks(2890),
                            CreativityCost = 0,
                            CuriosityCost = 0,
                            Image = "images/heroes/grubot.png",
                            IsUnlocked = false,
                            PositionX = 0.0,
                            PositionY = 0.0,
                            PrerequisitesJson = "[]",
                            RewardsJson = "[]",
                            SafetyCost = 0,
                            ThinkingCost = 0,
                            Type = "STORY_HERO",
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 265, DateTimeKind.Utc).AddTicks(2890)
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.HeroDefinitionTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HeroDefinitionId")
                        .IsRequired()
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Story")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("HeroDefinitionId", "LanguageCode")
                        .IsUnique();

                    b.ToTable("HeroDefinitionTranslations");
                });

            modelBuilder.Entity("XooCreator.BA.Data.HeroMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AudioUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HeroId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("MessageKey")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("RegionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("HeroId", "RegionId")
                        .IsUnique();

                    b.ToTable("HeroMessages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e6d3196d-117d-42eb-bf85-1be341944834"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/puf-puf/hero_puf-puf_region_gateway_message.wav",
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9453),
                            HeroId = "puf-puf",
                            IsActive = true,
                            MessageKey = "hero_puf-puf_region_gateway_message",
                            RegionId = "gateway",
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9454)
                        },
                        new
                        {
                            Id = new Guid("a38312d7-0903-4123-82e6-06444ce62360"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/puf-puf/hero_puf-puf_region_terra_message.wav",
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9457),
                            HeroId = "puf-puf",
                            IsActive = true,
                            MessageKey = "hero_puf-puf_region_terra_message",
                            RegionId = "terra",
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9458)
                        },
                        new
                        {
                            Id = new Guid("d7f7a387-8f53-4a94-9be0-2548829d9588"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/puf-puf/hero_puf-puf_region_lunaria_message.wav",
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9459),
                            HeroId = "puf-puf",
                            IsActive = true,
                            MessageKey = "hero_puf-puf_region_lunaria_message",
                            RegionId = "lunaria",
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9459)
                        },
                        new
                        {
                            Id = new Guid("14e1eb0e-3a06-48da-b1aa-78115aaeb8c3"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/puf-puf/hero_puf-puf_region_oceanica_message.wav",
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9461),
                            HeroId = "puf-puf",
                            IsActive = true,
                            MessageKey = "hero_puf-puf_region_oceanica_message",
                            RegionId = "oceanica",
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9461)
                        },
                        new
                        {
                            Id = new Guid("0ea00c2a-26ec-41d6-b536-fdb9dcac9ae5"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/puf-puf/hero_puf-puf_region_sylvaria_message.wav",
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9463),
                            HeroId = "puf-puf",
                            IsActive = true,
                            MessageKey = "hero_puf-puf_region_sylvaria_message",
                            RegionId = "sylvaria",
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9463)
                        },
                        new
                        {
                            Id = new Guid("670cced5-e70f-4345-b690-5cc8ca5ff2c8"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/puf-puf/hero_puf-puf_region_crystalia_message.wav",
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9493),
                            HeroId = "puf-puf",
                            IsActive = true,
                            MessageKey = "hero_puf-puf_region_crystalia_message",
                            RegionId = "crystalia",
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9493)
                        },
                        new
                        {
                            Id = new Guid("fa0204cc-3729-4466-b288-efaa0bc95517"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/puf-puf/hero_puf-puf_region_zephyra_message.wav",
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9495),
                            HeroId = "puf-puf",
                            IsActive = true,
                            MessageKey = "hero_puf-puf_region_zephyra_message",
                            RegionId = "zephyra",
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9495)
                        },
                        new
                        {
                            Id = new Guid("f88cf524-f9f6-420a-a2a9-259006808bd6"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/puf-puf/hero_puf-puf_region_pyron_message.wav",
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9497),
                            HeroId = "puf-puf",
                            IsActive = true,
                            MessageKey = "hero_puf-puf_region_pyron_message",
                            RegionId = "pyron",
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9497)
                        },
                        new
                        {
                            Id = new Guid("0f57b899-7242-4eb0-9310-4db616fe2ee2"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/puf-puf/hero_puf-puf_region_neptunia_message.wav",
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9498),
                            HeroId = "puf-puf",
                            IsActive = true,
                            MessageKey = "hero_puf-puf_region_neptunia_message",
                            RegionId = "neptunia",
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9499)
                        },
                        new
                        {
                            Id = new Guid("b0b651c2-4f95-4fe6-b841-0d05a8815732"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/puf-puf/hero_puf-puf_region_aetherion_message.wav",
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9501),
                            HeroId = "puf-puf",
                            IsActive = true,
                            MessageKey = "hero_puf-puf_region_aetherion_message",
                            RegionId = "aetherion",
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9501)
                        },
                        new
                        {
                            Id = new Guid("339155fd-8963-4ccf-9f5f-851e08698e42"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/puf-puf/hero_puf-puf_region_kelo_ketis_message.wav",
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9503),
                            HeroId = "puf-puf",
                            IsActive = true,
                            MessageKey = "hero_puf-puf_region_kelo_ketis_message",
                            RegionId = "kelo-ketis",
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9503)
                        },
                        new
                        {
                            Id = new Guid("81450a64-245a-4747-8336-85142b8b71f2"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/linkaro/hero_linkaro_region_gateway_message.wav",
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9506),
                            HeroId = "linkaro",
                            IsActive = true,
                            MessageKey = "hero_linkaro_region_gateway_message",
                            RegionId = "gateway",
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9506)
                        },
                        new
                        {
                            Id = new Guid("49a9ec8a-cd53-4450-8575-9dfc599a4b43"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/linkaro/hero_linkaro_region_terra_message.wav",
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9508),
                            HeroId = "linkaro",
                            IsActive = true,
                            MessageKey = "hero_linkaro_region_terra_message",
                            RegionId = "terra",
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9508)
                        },
                        new
                        {
                            Id = new Guid("9bef90e9-6d36-4274-9c36-2cac6e4d00a2"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/linkaro/hero_linkaro_region_lunaria_message.wav",
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9511),
                            HeroId = "linkaro",
                            IsActive = true,
                            MessageKey = "hero_linkaro_region_lunaria_message",
                            RegionId = "lunaria",
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9511)
                        },
                        new
                        {
                            Id = new Guid("e4d2aa39-1da4-49c7-9d7e-427792592ae5"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/linkaro/hero_linkaro_region_mechanika_message.wav",
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9513),
                            HeroId = "linkaro",
                            IsActive = true,
                            MessageKey = "hero_linkaro_region_mechanika_message",
                            RegionId = "mechanika",
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9513)
                        },
                        new
                        {
                            Id = new Guid("4e457f77-2332-4b07-9f3d-3ad50427c986"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/linkaro/hero_linkaro_region_oceanica_message.wav",
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9514),
                            HeroId = "linkaro",
                            IsActive = true,
                            MessageKey = "hero_linkaro_region_oceanica_message",
                            RegionId = "oceanica",
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9514)
                        },
                        new
                        {
                            Id = new Guid("e7944f55-dfa6-4ecf-a008-80c7d9b144a0"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/linkaro/hero_linkaro_region_sylvaria_message.wav",
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9516),
                            HeroId = "linkaro",
                            IsActive = true,
                            MessageKey = "hero_linkaro_region_sylvaria_message",
                            RegionId = "sylvaria",
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9516)
                        },
                        new
                        {
                            Id = new Guid("7260e99c-6aef-4c33-99df-27ebcc7a7602"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/linkaro/hero_linkaro_region_crystalia_message.wav",
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9518),
                            HeroId = "linkaro",
                            IsActive = true,
                            MessageKey = "hero_linkaro_region_crystalia_message",
                            RegionId = "crystalia",
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9518)
                        },
                        new
                        {
                            Id = new Guid("bcde9bfb-cf60-4336-b721-1faaf4e28a62"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/linkaro/hero_linkaro_region_zephyra_message.wav",
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9520),
                            HeroId = "linkaro",
                            IsActive = true,
                            MessageKey = "hero_linkaro_region_zephyra_message",
                            RegionId = "zephyra",
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9520)
                        },
                        new
                        {
                            Id = new Guid("2e5a6b07-a054-45fa-9607-f4d3e3b7d07f"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/linkaro/hero_linkaro_region_pyron_message.wav",
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9521),
                            HeroId = "linkaro",
                            IsActive = true,
                            MessageKey = "hero_linkaro_region_pyron_message",
                            RegionId = "pyron",
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9521)
                        },
                        new
                        {
                            Id = new Guid("6510c17f-008f-4c9e-bc0b-38ff622c3aa5"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/linkaro/hero_linkaro_region_neptunia_message.wav",
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9523),
                            HeroId = "linkaro",
                            IsActive = true,
                            MessageKey = "hero_linkaro_region_neptunia_message",
                            RegionId = "neptunia",
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9523)
                        },
                        new
                        {
                            Id = new Guid("e9fa89e3-074e-4a8b-8a8c-084819dd1f5d"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/linkaro/hero_linkaro_region_aetherion_message.wav",
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9526),
                            HeroId = "linkaro",
                            IsActive = true,
                            MessageKey = "hero_linkaro_region_aetherion_message",
                            RegionId = "aetherion",
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9526)
                        },
                        new
                        {
                            Id = new Guid("2c039ef3-5b82-49c9-9c03-61dcd527abc9"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/linkaro/hero_linkaro_region_kelo_ketis_message.wav",
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9527),
                            HeroId = "linkaro",
                            IsActive = true,
                            MessageKey = "hero_linkaro_region_kelo_ketis_message",
                            RegionId = "kelo-ketis",
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9528)
                        },
                        new
                        {
                            Id = new Guid("43dd846b-ec33-4033-a49e-eb718ba035b3"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/grubot/hero_grubot_region_gateway_message.wav",
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9529),
                            HeroId = "grubot",
                            IsActive = true,
                            MessageKey = "hero_grubot_region_gateway_message",
                            RegionId = "gateway",
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9530)
                        },
                        new
                        {
                            Id = new Guid("5ee86728-9932-45dd-b0ac-afe187b7d76e"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/grubot/hero_grubot_region_terra_message.wav",
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9531),
                            HeroId = "grubot",
                            IsActive = true,
                            MessageKey = "hero_grubot_region_terra_message",
                            RegionId = "terra",
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9531)
                        },
                        new
                        {
                            Id = new Guid("abb5a4aa-8dbf-44de-97fa-49155b66c770"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/grubot/hero_grubot_region_lunaria_message.wav",
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9533),
                            HeroId = "grubot",
                            IsActive = true,
                            MessageKey = "hero_grubot_region_lunaria_message",
                            RegionId = "lunaria",
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9533)
                        },
                        new
                        {
                            Id = new Guid("933b59e6-6bcd-4cc2-b4cd-90f3356959f6"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/grubot/hero_grubot_region_mechanika_message.wav",
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9534),
                            HeroId = "grubot",
                            IsActive = true,
                            MessageKey = "hero_grubot_region_mechanika_message",
                            RegionId = "mechanika",
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9534)
                        },
                        new
                        {
                            Id = new Guid("14799dc9-1edd-4dea-82af-57977c48fa1d"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/grubot/hero_grubot_region_oceanica_message.wav",
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9536),
                            HeroId = "grubot",
                            IsActive = true,
                            MessageKey = "hero_grubot_region_oceanica_message",
                            RegionId = "oceanica",
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9536)
                        },
                        new
                        {
                            Id = new Guid("3982d41e-a4a0-480d-acde-9d7a7acd38f7"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/grubot/hero_grubot_region_sylvaria_message.wav",
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9537),
                            HeroId = "grubot",
                            IsActive = true,
                            MessageKey = "hero_grubot_region_sylvaria_message",
                            RegionId = "sylvaria",
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9537)
                        },
                        new
                        {
                            Id = new Guid("de419f29-2580-4b31-a4b2-88d79c4e79eb"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/grubot/hero_grubot_region_crystalia_message.wav",
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9540),
                            HeroId = "grubot",
                            IsActive = true,
                            MessageKey = "hero_grubot_region_crystalia_message",
                            RegionId = "crystalia",
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9540)
                        },
                        new
                        {
                            Id = new Guid("0717c66e-a57b-4b8d-b256-fd5e79cde759"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/grubot/hero_grubot_region_zephyra_message.wav",
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9542),
                            HeroId = "grubot",
                            IsActive = true,
                            MessageKey = "hero_grubot_region_zephyra_message",
                            RegionId = "zephyra",
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9542)
                        },
                        new
                        {
                            Id = new Guid("a182848d-ba2b-4ff6-92fe-8d885fd1031e"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/grubot/hero_grubot_region_pyron_message.wav",
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9543),
                            HeroId = "grubot",
                            IsActive = true,
                            MessageKey = "hero_grubot_region_pyron_message",
                            RegionId = "pyron",
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9543)
                        },
                        new
                        {
                            Id = new Guid("85455a9a-5d81-4a16-ba23-a841aaa37bcc"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/grubot/hero_grubot_region_neptunia_message.wav",
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9545),
                            HeroId = "grubot",
                            IsActive = true,
                            MessageKey = "hero_grubot_region_neptunia_message",
                            RegionId = "neptunia",
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9545)
                        },
                        new
                        {
                            Id = new Guid("d3f7b0d4-0225-4992-b028-6868ac86b89f"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/grubot/hero_grubot_region_aetherion_message.wav",
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9547),
                            HeroId = "grubot",
                            IsActive = true,
                            MessageKey = "hero_grubot_region_aetherion_message",
                            RegionId = "aetherion",
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9547)
                        },
                        new
                        {
                            Id = new Guid("08a52257-5547-41b9-a09e-f5195e22cc16"),
                            AudioUrl = "audio/ro-ro/tol/hero-speach/grubot/hero_grubot_region_kelo_ketis_message.wav",
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9549),
                            HeroId = "grubot",
                            IsActive = true,
                            MessageKey = "hero_grubot_region_kelo_ketis_message",
                            RegionId = "kelo-ketis",
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(9549)
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.HeroProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("HeroId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HeroType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceStoryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UnlockedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "HeroId", "HeroType")
                        .IsUnique();

                    b.ToTable("HeroProgress");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            HeroId = "seed",
                            HeroType = "HERO_TREE_TRANSFORMATION",
                            SourceStoryId = "",
                            UnlockedAt = new DateTime(2025, 10, 28, 20, 33, 35, 269, DateTimeKind.Utc).AddTicks(7695),
                            UserId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            HeroId = "seed",
                            HeroType = "HERO_TREE_TRANSFORMATION",
                            SourceStoryId = "",
                            UnlockedAt = new DateTime(2025, 10, 28, 20, 33, 35, 269, DateTimeKind.Utc).AddTicks(7697),
                            UserId = new Guid("22222222-2222-2222-2222-222222222222")
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.HeroTreeProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("NodeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TokensCostCourage")
                        .HasColumnType("integer");

                    b.Property<int>("TokensCostCreativity")
                        .HasColumnType("integer");

                    b.Property<int>("TokensCostCuriosity")
                        .HasColumnType("integer");

                    b.Property<int>("TokensCostSafety")
                        .HasColumnType("integer");

                    b.Property<int>("TokensCostThinking")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UnlockedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "NodeId")
                        .IsUnique();

                    b.ToTable("HeroTreeProgress");
                });

            modelBuilder.Entity("XooCreator.BA.Data.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<string>("PayloadJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ResultUrl")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasMaxLength(24)
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasMaxLength(24)
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("XooCreator.BA.Data.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000001"),
                            Name = "Sahara"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000002"),
                            Name = "Jungle"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000003"),
                            Name = "Farm"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000004"),
                            Name = "Savanna"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000005"),
                            Name = "Forest"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000006"),
                            Name = "Wetlands"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000007"),
                            Name = "Mountains"
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AnswerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Guid>("StoryTileId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TokensJson")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StoryTileId", "AnswerId")
                        .IsUnique();

                    b.ToTable("StoryAnswers");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryAnswerToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("StoryAnswerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("StoryAnswerId");

                    b.ToTable("StoryAnswerTokens");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryAnswerTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<Guid>("StoryAnswerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StoryAnswerId", "LanguageCode")
                        .IsUnique();

                    b.ToTable("StoryAnswerTranslations");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryDefinition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CoverImageUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("StoryCategory")
                        .HasColumnType("integer");

                    b.Property<string>("StoryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StoryId")
                        .IsUnique();

                    b.ToTable("StoryDefinitions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            Category = "terra",
                            CoverImageUrl = "images/tol/stories/pp-prietenul-pierdut/0.cover.png",
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 265, DateTimeKind.Utc).AddTicks(5824),
                            CreatedBy = new Guid("33333333-3333-3333-3333-333333333333"),
                            IsActive = true,
                            SortOrder = 1,
                            Status = 1,
                            StoryCategory = 1,
                            StoryId = "learn-to-read-s1",
                            Title = "Puf-Puf și prietenul pierdut",
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 265, DateTimeKind.Utc).AddTicks(5825),
                            UpdatedBy = new Guid("33333333-3333-3333-3333-333333333333")
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryDefinitionTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<Guid>("StoryDefinitionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StoryDefinitionId", "LanguageCode")
                        .IsUnique();

                    b.ToTable("StoryDefinitionTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c8272ec0-c3a2-4e52-afc5-b83ae21276ce"),
                            LanguageCode = "ro-ro",
                            StoryDefinitionId = new Guid("44444444-4444-4444-4444-444444444444"),
                            Title = "Puf-Puf și prietenul pierdut"
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryHero", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HeroId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("UnlockConditionJson")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("HeroId")
                        .IsUnique();

                    b.ToTable("StoryHeroes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000100"),
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(3702),
                            HeroId = "puf-puf",
                            ImageUrl = "images/tol/stories/intro-pufpuf/heroes/pufpufblink.gif",
                            IsActive = true,
                            UnlockConditionJson = "{\"Type\":\"story_completion\",\"RequiredStories\":[\"intro-pufpuf\"],\"MinProgress\":100}",
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(3702)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111100"),
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(3728),
                            HeroId = "linkaro",
                            ImageUrl = "images/tol/stories/lunaria-s1/heroes/linkaro.png",
                            IsActive = true,
                            UnlockConditionJson = "{\"Type\":\"story_completion\",\"RequiredStories\":[\"lunaria-s1\"],\"MinProgress\":100}",
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(3728)
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222200"),
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(3747),
                            HeroId = "grubot",
                            ImageUrl = "images/tol/stories/mechanika-s1/heroes/grubot.png",
                            IsActive = true,
                            UnlockConditionJson = "{\"Type\":\"story_completion\",\"RequiredStories\":[\"mechanika-s1\"],\"MinProgress\":100}",
                            UpdatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(3748)
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryHeroUnlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("StoryHeroId")
                        .HasColumnType("uuid");

                    b.Property<string>("StoryId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("UnlockOrder")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StoryHeroId", "StoryId")
                        .IsUnique();

                    b.ToTable("StoryHeroUnlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a0901ab4-9326-451d-bda1-10145d40ad80"),
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(5928),
                            StoryHeroId = new Guid("00000000-0000-0000-0000-000000000100"),
                            StoryId = "intro-pufpuf",
                            UnlockOrder = 1
                        },
                        new
                        {
                            Id = new Guid("25f2eb14-535d-4675-8d5f-61fe75996ed1"),
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(5960),
                            StoryHeroId = new Guid("11111111-1111-1111-1111-111111111100"),
                            StoryId = "lunaria-s1",
                            UnlockOrder = 1
                        },
                        new
                        {
                            Id = new Guid("067b9beb-5e26-448b-9880-d8f0ba91ee41"),
                            CreatedAt = new DateTime(2025, 10, 28, 20, 33, 35, 264, DateTimeKind.Utc).AddTicks(5995),
                            StoryHeroId = new Guid("22222222-2222-2222-2222-222222222200"),
                            StoryId = "mechanika-s1",
                            UnlockOrder = 1
                        });
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryMarketplaceInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AgeRating")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Characters")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("EstimatedReadingTime")
                        .HasColumnType("integer");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNew")
                        .HasColumnType("boolean");

                    b.Property<int>("PriceInCredits")
                        .HasColumnType("integer");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("StoryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("StoryId")
                        .IsUnique();

                    b.ToTable("StoryMarketplaceInfos");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SelectedAnswer")
                        .HasColumnType("text");

                    b.Property<string>("StoryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TokensJson")
                        .HasColumnType("text");

                    b.Property<string>("TreeConfigurationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TreeConfigurationId");

                    b.HasIndex("UserId", "StoryId", "TreeConfigurationId")
                        .IsUnique();

                    b.ToTable("StoryProgress");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryPurchase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CreditsSpent")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PurchasedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("StoryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StoryId");

                    b.HasIndex("UserId", "StoryId")
                        .IsUnique();

                    b.ToTable("StoryPurchases");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryTile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AudioUrl")
                        .HasColumnType("text");

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Question")
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Guid>("StoryDefinitionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<string>("TileId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("StoryDefinitionId", "TileId")
                        .IsUnique();

                    b.ToTable("StoryTiles");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryTileTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Question")
                        .HasColumnType("text");

                    b.Property<Guid>("StoryTileId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StoryTileId", "LanguageCode")
                        .IsUnique();

                    b.ToTable("StoryTileTranslations");
                });

            modelBuilder.Entity("XooCreator.BA.Data.Tree", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CurrentTier")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("RootType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Trees");
                });

            modelBuilder.Entity("XooCreator.BA.Data.TreeChoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BranchType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Tier")
                        .HasColumnType("integer");

                    b.Property<string>("TraitAwarded")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TreeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TreeId", "Tier")
                        .IsUnique();

                    b.ToTable("TreeChoices");
                });

            modelBuilder.Entity("XooCreator.BA.Data.TreeConfiguration", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TreeConfigurations");
                });

            modelBuilder.Entity("XooCreator.BA.Data.TreeProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsUnlocked")
                        .HasColumnType("boolean");

                    b.Property<string>("RegionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TreeConfigurationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UnlockedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TreeConfigurationId");

                    b.HasIndex("UserId", "RegionId", "TreeConfigurationId")
                        .IsUnique();

                    b.ToTable("TreeProgress");
                });

            modelBuilder.Entity("XooCreator.BA.Data.TreeRegion", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PufpufMessage")
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("TreeConfigurationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TreeConfigurationId");

                    b.HasIndex("Id", "TreeConfigurationId")
                        .IsUnique();

                    b.ToTable("TreeRegions");
                });

            modelBuilder.Entity("XooCreator.BA.Data.TreeStoryNode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RegionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RewardImageUrl")
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("StoryId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TreeConfigurationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.HasIndex("TreeConfigurationId");

                    b.HasIndex("StoryId", "RegionId", "TreeConfigurationId")
                        .IsUnique();

                    b.ToTable("TreeStoryNodes");
                });

            modelBuilder.Entity("XooCreator.BA.Data.TreeUnlockRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FromId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("MinCount")
                        .HasColumnType("integer");

                    b.Property<string>("RequiredStoriesCsv")
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("StoryId")
                        .HasColumnType("text");

                    b.Property<string>("ToRegionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TreeConfigurationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TreeConfigurationId");

                    b.ToTable("TreeUnlockRules");
                });

            modelBuilder.Entity("XooCreator.BA.Data.UserBestiary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BestiaryItemId")
                        .HasColumnType("uuid");

                    b.Property<string>("BestiaryType")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("DiscoveredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BestiaryItemId");

                    b.HasIndex("UserId", "BestiaryItemId", "BestiaryType")
                        .IsUnique();

                    b.ToTable("UserBestiary", (string)null);
                });

            modelBuilder.Entity("XooCreator.BA.Data.UserCreatedStories", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreationNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("StoryDefinitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StoryDefinitionId");

                    b.HasIndex("UserId", "StoryDefinitionId")
                        .IsUnique();

                    b.ToTable("UserCreatedStories");
                });

            modelBuilder.Entity("XooCreator.BA.Data.UserOwnedStories", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("PurchaseReference")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("PurchasedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("StoryDefinitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StoryDefinitionId");

                    b.HasIndex("UserId", "StoryDefinitionId")
                        .IsUnique();

                    b.ToTable("UserOwnedStories");
                });

            modelBuilder.Entity("XooCreator.BA.Data.UserStoryReadProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ReadAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("StoryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TileId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "StoryId", "TileId")
                        .IsUnique();

                    b.ToTable("UserStoryReadProgress");
                });

            modelBuilder.Entity("XooCreator.BA.Data.UserTokenBalance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Type", "Value")
                        .IsUnique();

                    b.ToTable("UserTokenBalances");
                });

            modelBuilder.Entity("XooCreator.BA.Data.Animal", b =>
                {
                    b.HasOne("XooCreator.BA.Data.Region", "Region")
                        .WithMany("Animals")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("XooCreator.BA.Data.AnimalPartSupport", b =>
                {
                    b.HasOne("XooCreator.BA.Data.Animal", "Animal")
                        .WithMany("SupportedParts")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XooCreator.BA.Data.BodyPart", "Part")
                        .WithMany()
                        .HasForeignKey("PartKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("XooCreator.BA.Data.AnimalTranslation", b =>
                {
                    b.HasOne("XooCreator.BA.Data.Animal", "Animal")
                        .WithMany("Translations")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");
                });

            modelBuilder.Entity("XooCreator.BA.Data.BodyPartTranslation", b =>
                {
                    b.HasOne("XooCreator.BA.Data.BodyPart", "BodyPart")
                        .WithMany("Translations")
                        .HasForeignKey("BodyPartKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BodyPart");
                });

            modelBuilder.Entity("XooCreator.BA.Data.Creature", b =>
                {
                    b.HasOne("XooCreator.BA.Data.Tree", "Tree")
                        .WithMany()
                        .HasForeignKey("TreeId");

                    b.HasOne("XooCreator.BA.Data.AlchimaliaUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tree");

                    b.Navigation("User");
                });

            modelBuilder.Entity("XooCreator.BA.Data.CreditTransaction", b =>
                {
                    b.HasOne("XooCreator.BA.Data.AlchimaliaUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("XooCreator.BA.Data.CreditWallet", b =>
                {
                    b.HasOne("XooCreator.BA.Data.AlchimaliaUser", "User")
                        .WithOne()
                        .HasForeignKey("XooCreator.BA.Data.CreditWallet", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("XooCreator.BA.Data.HeroDefinitionTranslation", b =>
                {
                    b.HasOne("XooCreator.BA.Data.HeroDefinition", "HeroDefinition")
                        .WithMany("Translations")
                        .HasForeignKey("HeroDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HeroDefinition");
                });

            modelBuilder.Entity("XooCreator.BA.Data.HeroProgress", b =>
                {
                    b.HasOne("XooCreator.BA.Data.AlchimaliaUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("XooCreator.BA.Data.HeroTreeProgress", b =>
                {
                    b.HasOne("XooCreator.BA.Data.AlchimaliaUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("XooCreator.BA.Data.Job", b =>
                {
                    b.HasOne("XooCreator.BA.Data.AlchimaliaUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryAnswer", b =>
                {
                    b.HasOne("XooCreator.BA.Data.StoryTile", "StoryTile")
                        .WithMany("Answers")
                        .HasForeignKey("StoryTileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoryTile");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryAnswerToken", b =>
                {
                    b.HasOne("XooCreator.BA.Data.StoryAnswer", "StoryAnswer")
                        .WithMany("Tokens")
                        .HasForeignKey("StoryAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoryAnswer");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryAnswerTranslation", b =>
                {
                    b.HasOne("XooCreator.BA.Data.StoryAnswer", "StoryAnswer")
                        .WithMany("Translations")
                        .HasForeignKey("StoryAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoryAnswer");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryDefinitionTranslation", b =>
                {
                    b.HasOne("XooCreator.BA.Data.StoryDefinition", "StoryDefinition")
                        .WithMany("Translations")
                        .HasForeignKey("StoryDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoryDefinition");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryHeroUnlock", b =>
                {
                    b.HasOne("XooCreator.BA.Data.StoryHero", "StoryHero")
                        .WithMany("StoryUnlocks")
                        .HasForeignKey("StoryHeroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoryHero");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryMarketplaceInfo", b =>
                {
                    b.HasOne("XooCreator.BA.Data.StoryDefinition", "Story")
                        .WithMany()
                        .HasForeignKey("StoryId")
                        .HasPrincipalKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Story");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryProgress", b =>
                {
                    b.HasOne("XooCreator.BA.Data.TreeConfiguration", "TreeConfiguration")
                        .WithMany()
                        .HasForeignKey("TreeConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XooCreator.BA.Data.AlchimaliaUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TreeConfiguration");

                    b.Navigation("User");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryPurchase", b =>
                {
                    b.HasOne("XooCreator.BA.Data.StoryDefinition", "Story")
                        .WithMany()
                        .HasForeignKey("StoryId")
                        .HasPrincipalKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XooCreator.BA.Data.AlchimaliaUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Story");

                    b.Navigation("User");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryTile", b =>
                {
                    b.HasOne("XooCreator.BA.Data.StoryDefinition", "StoryDefinition")
                        .WithMany("Tiles")
                        .HasForeignKey("StoryDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoryDefinition");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryTileTranslation", b =>
                {
                    b.HasOne("XooCreator.BA.Data.StoryTile", "StoryTile")
                        .WithMany("Translations")
                        .HasForeignKey("StoryTileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoryTile");
                });

            modelBuilder.Entity("XooCreator.BA.Data.Tree", b =>
                {
                    b.HasOne("XooCreator.BA.Data.AlchimaliaUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("XooCreator.BA.Data.TreeChoice", b =>
                {
                    b.HasOne("XooCreator.BA.Data.Tree", "Tree")
                        .WithMany("Choices")
                        .HasForeignKey("TreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tree");
                });

            modelBuilder.Entity("XooCreator.BA.Data.TreeProgress", b =>
                {
                    b.HasOne("XooCreator.BA.Data.TreeConfiguration", "TreeConfiguration")
                        .WithMany()
                        .HasForeignKey("TreeConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XooCreator.BA.Data.AlchimaliaUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TreeConfiguration");

                    b.Navigation("User");
                });

            modelBuilder.Entity("XooCreator.BA.Data.TreeRegion", b =>
                {
                    b.HasOne("XooCreator.BA.Data.TreeConfiguration", "TreeConfiguration")
                        .WithMany()
                        .HasForeignKey("TreeConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TreeConfiguration");
                });

            modelBuilder.Entity("XooCreator.BA.Data.TreeStoryNode", b =>
                {
                    b.HasOne("XooCreator.BA.Data.TreeRegion", "Region")
                        .WithMany("Stories")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XooCreator.BA.Data.StoryDefinition", "StoryDefinition")
                        .WithMany()
                        .HasForeignKey("StoryId")
                        .HasPrincipalKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XooCreator.BA.Data.TreeConfiguration", "TreeConfiguration")
                        .WithMany()
                        .HasForeignKey("TreeConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");

                    b.Navigation("StoryDefinition");

                    b.Navigation("TreeConfiguration");
                });

            modelBuilder.Entity("XooCreator.BA.Data.TreeUnlockRule", b =>
                {
                    b.HasOne("XooCreator.BA.Data.TreeConfiguration", "TreeConfiguration")
                        .WithMany()
                        .HasForeignKey("TreeConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TreeConfiguration");
                });

            modelBuilder.Entity("XooCreator.BA.Data.UserBestiary", b =>
                {
                    b.HasOne("XooCreator.BA.Data.BestiaryItem", "BestiaryItem")
                        .WithMany()
                        .HasForeignKey("BestiaryItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XooCreator.BA.Data.AlchimaliaUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BestiaryItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("XooCreator.BA.Data.UserCreatedStories", b =>
                {
                    b.HasOne("XooCreator.BA.Data.StoryDefinition", "StoryDefinition")
                        .WithMany()
                        .HasForeignKey("StoryDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XooCreator.BA.Data.AlchimaliaUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoryDefinition");

                    b.Navigation("User");
                });

            modelBuilder.Entity("XooCreator.BA.Data.UserOwnedStories", b =>
                {
                    b.HasOne("XooCreator.BA.Data.StoryDefinition", "StoryDefinition")
                        .WithMany()
                        .HasForeignKey("StoryDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XooCreator.BA.Data.AlchimaliaUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoryDefinition");

                    b.Navigation("User");
                });

            modelBuilder.Entity("XooCreator.BA.Data.UserStoryReadProgress", b =>
                {
                    b.HasOne("XooCreator.BA.Data.AlchimaliaUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("XooCreator.BA.Data.UserTokenBalance", b =>
                {
                    b.HasOne("XooCreator.BA.Data.AlchimaliaUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("XooCreator.BA.Data.Animal", b =>
                {
                    b.Navigation("SupportedParts");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("XooCreator.BA.Data.BodyPart", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("XooCreator.BA.Data.HeroDefinition", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("XooCreator.BA.Data.Region", b =>
                {
                    b.Navigation("Animals");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryAnswer", b =>
                {
                    b.Navigation("Tokens");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryDefinition", b =>
                {
                    b.Navigation("Tiles");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryHero", b =>
                {
                    b.Navigation("StoryUnlocks");
                });

            modelBuilder.Entity("XooCreator.BA.Data.StoryTile", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("XooCreator.BA.Data.Tree", b =>
                {
                    b.Navigation("Choices");
                });

            modelBuilder.Entity("XooCreator.BA.Data.TreeRegion", b =>
                {
                    b.Navigation("Stories");
                });
#pragma warning restore 612, 618
        }
    }
}
